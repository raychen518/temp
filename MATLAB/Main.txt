--------------------------------------------------
MATLAB
--------------------------------------------------
++++++++++
Contents
++++++++++
Overview
Study Notes (at MathWorks)
    --------------------------------------------------------
    MATLAB Panels
    MATLAB Designed for Matrices
    Variables as Arrays
    Arrays as Matrices
    Arrays as Vectors
    Long/Short Display Format
    Element-wise Operations
    Array Concatenation
    Complex Numbers
    Array Indexing
    Extending Array Size
    Listing Workspace Variables
    Saving/Loading Workspace Variables
    Text and Characters
    Calling Functions
    Accepting Function Outputs
    2D Plotting
    2D Plotting with Line Specification
    3D Plotting
    Adding New Plots to Existing Plots
    Programming and Scripts
    Loops and Conditional Statements
    Help and Documentation
    --------------------------------------------------------
    Entering the Commands
    Formatting Output
    Continuing Long Statements on Multiple Lines
    Creating Shortcuts
    Stopping a Command's Execution
    Finding Functions
    Finding Text
    Checking Syntax as Typing
    Writing to a Diary File
    Variable Names
    Case and Space Sensitivity
    Command Syntax vs. Function Syntax
    --------------------------------------------------------
    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    Line Specification
    Operators and Elementary Operations
    --------------------------------------------------------
Function List
Code Snippets
Toolbox - Psychtoolbox
    Overview
    Information for Beginners
    Misc
        Updating Psychtoolbox
    Study Notes
References
    MATLAB - MathWorks
    MATLAB - Wikipedia
    MATLAB Documentation - MathWorks
    MATLAB Academy - MathWorks
    MATLAB - Tutorials Point
    MATLAB Programming - Wikibooks
    MATLAB Installation Information (Sample)
    Psychtoolbox
    Psychtoolbox - Wikipedia
    Psychtoolbox Documentation
    Psychtoolbox Tutorial

========================================
Xxxxx Xxxxx Xxxxx
========================================
++++++++++
Contents
++++++++++
============================================================
Xxxxx Xxxxx Xxxxx
============================================================
--------------------------------------------------------------------------------

Notes:
- Unless otherwise specified, all content in this document is based on the following software versions.
  - MATLAB R2016b
  - Psychtoolbox 3.0.14 (30 December 2016)
- The empty string ('') is considered as a 0x0 empty char array in MATLAB.

========================================
Overview
========================================
- MATLAB is an abbreviation for MATrix LABoratory.
- MATLAB is a multi-paradigm numerical computing environment and a programming language. (多范式、多范型)
- MATLAB allows the following features.
  - Matrix Manipulations            控制矩阵
  - Plotting of Functions and Data  绘制函数和数据
  - Implementation of Algorithms    实现算法
  - Creation of User Interfaces     创建用户界面
  - Interfacing with Programs Written in Other Languages (such as C, C++, C#, Java, Fortran and Python)
                                    连接其他语言编写的程序（如C、C++、C#、Java、Fortran和Python）
- MATLAB is adopted in domains as follows.
  - Machine Learning                机器学习
  - Signal Processing               信号处理
  - Image Processing                图像处理
  - Computer Vision                 计算机视觉
  - Communications                  通讯
  - Computational Finance           计算金融
  - Control Design                  控制设计
  - Robotics                        机器人技术
  - Education (especially Linear Algebra and Numerical Analysis)
                                    教育（特别是线性代数和数值分析）
  - etc.                            其他
- MATLAB is developed by MathWorks and it is proprietary.

========================================
Study Notes (at MathWorks)
========================================
MATLAB Documentation - MathWorks
https://www.mathworks.com/help/matlab

++++++++++
Contents
++++++++++
Section                                     Description
------------------------------------------------------------------------------------------------------------------------
[X] Getting Started                         Describe the basics of MATLAB.
[>] Language Fundamentals                   Describe the syntax, operators, data types, array indexing and manipulation of MATLAB.
[ ] Mathematics                             Describe realizing linear algebra, differentiation and integrals, Fourier transforms, and other mathematics using MATLAB.
[ ] Graphics                                Describe realizing 2D/3D plots, images, animation and visualization using MATLAB.
[ ] Data Import and Analysis                Describe the data's import and export, preprocessing and visual exploration in MATLAB.
[ ] Programming Scripts and Functions       Describe the program files, control flow, editing and debugging in MATLAB.
[ ] App Building                            Describe the App development using GUIDE, App Designer, or a programmatic workflow in MATLAB.
[ ] Advanced Software Development           Describe the object-oriented programming, code performance, unit testing, external interfaces to Java , C/C++, .NET and other languages in MATLAB.
[ ] Desktop Environment                     Describe the preferences and settings, and platform differences in MATLAB.
[ ] Supported Hardware                      Describe the support for third-party hardware, such as webcam, Arduino, and Raspberry Pi, from MATLAB.

Getting Started
https://www.mathworks.com/help/matlab/getting-started-with-matlab.html
------------------------------------------------------------------------------------------------------------------------
[X] Desktop Basics
[X] Matrices and Arrays
[X] Array Indexing
[X] Workspace Variables
[X] Text and Characters
[X] Calling Functions
[X] 2D/3D Plots
[X] Programming and Scripts
[X] Help and Documentation

Language Fundamentals
https://www.mathworks.com/help/matlab/language-fundamentals.html
------------------------------------------------------------------------------------------------------------------------
[X] Entering Commands
[X] Matrices and Arrays                     All the Topics sections are not read.
[>] Operators and Elementary Operations     All the Topics sections are not read.
[ ] Special Characters
[ ] Data Types

++++++++++++++++++++
Contents (Points)
++++++++++++++++++++
MATLAB Panels
MATLAB Designed for Matrices
Variables as Arrays
Arrays, Matrices and Vectors
Long/Short Display Format
Element-wise Operations
Array Concatenation
Complex Numbers
Array Indexing
Extending Array Size
Listing Workspace Variables
Saving/Loading Workspace Variables
Text and Characters
Calling Functions
Accepting Function Outputs
2D Plotting
2D Plotting with Line Specification
3D Plotting
Adding New Plots to Existing Plots
Programming and Scripts
Loops and Conditional Statements
Help and Documentation
--------------------------------------------------------------------------------
Entering the Commands
Formatting Output
Continuing Long Statements on Multiple Lines
Creating Shortcuts
Stopping a Command's Execution
Finding Functions
Finding Text
Checking Syntax as Typing
Writing to a Diary File
Variable Names
Case and Space Sensitivity
Command Syntax vs. Function Syntax
--------------------------------------------------------------------------------
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Line Specification

- MATLAB Panels
  MATLAB contains the following panels.
    - Command Window    : Allow to enter commands.
    - Command History   : Allow to see and use commands run.
    - Workspace         : Allow to explore data.
    - Current Folder    : Allow to access files.

- MATLAB Designed for Matrices
  While other programming languages mostly work with numbers one at a time, MATLAB is designed to operate primarily on whole matrices and arrays.

- Variables as Arrays
  All MATLAB variables are arrays.

- Arrays, Matrices and Vectors
  - Matrices are 2D arrays.
    e.g.
        A 3x4 Matrix
           11  12  13  14
           21  22  23  24
           31  32  33  34

        A 3x3 Matrix
            1   2   3
            4   5   6
            7   8   9

  - Vectors are 1D arrays.
    e.g.
        A Row Vector
            1 2 3

        A Column Vector
            1
            2
            3

- Long/Short Display Format
  MATLAB stores numbers as floating-point values, and arithmetic operations are sensitive to small differences between the actual value and its floating-point representation.
  By default, MATLAB displays numbers in the short format (4 digits after the decimal point).
  To see the numbers in the long format (15 digits after the decimal point), use the command "format long".
  To see the numbers in the short format again, use the command "format short".
    Display Using the Short Format (default)
        0.4240  0.2625  0.9289
        0.5079  0.8000  0.7303
        0.0855  0.0292  0.4800

    Display Using the Long Format
        0.424000000000000   0.262482234698333   0.928854139478045
        0.507858284661118   0.800000000000000   0.730330862855453
        0.085515797090044   0.029220277562146   0.480000000000000

- Element-wise Operations
  To perform element-wise multiplication or division or power rather than matrix multiplication or division or power,
  use the .* or ./ or .^ operator instead of the * or / or ^ operator.
    e.g.
        x
            1   2
            3   4

        y
            5   6
            7   8

        x * y           Matrix Multiplication
            19  22
            43  50

        x .* y          Element-wise Multiplication
            5   12
            21  32

        y / x           Matrix Division
            -1.0000    2.0000
            -2.0000    3.0000

        y ./ x          Element-wise Division
            5.0000    3.0000
            2.3333    2.0000

        x ^ 3           Matrix Power
            37    54
            81   118

        x .^ 3          Element-wise Power
            1     8
            27    64

- Array Concatenation
  Arrays can be concatenated to make a larger array, by a pair of brackets ([]).
    e.g.
        x = [1 2 3]
        y = [x 4 5 6]
        z = [x y]

        array1 = [1 2 3]
        array2 = [4 5]
        array3 = [4 5 6]
        [array1 array2]                         Horizontal Concatenation
        [array1, array2]                        Horizontal Concatenation
        [array1; array3]                        Vertical Concatenation

        [1 2 3 4; rand(2, 4); 5 6 7 8]

- Complex Numbers
  Complex numbers have both real and imaginary parts, where the imaginary unit is the square root of -1.
    sqrt(-1) -----> 0.0000 + 1.0000i

  Use either i or j to represent the imaginary part of complex numbers.
    e.g.
        c = [3 + 4i, 4 + 3j; -i, 10j]

- Array Indexing
  There are 2 approaches to refer to a particular element in an array.

  Assuming there is an array named A as follows.
    1   2   3   4
    5   6   7   8
    9   10  11  12
    13  14  15  16

  1. Use the Syntax - A(X, Y).
     A is the array's name, X and Y are the particular element's row and column indexes.
     A(3, 2) -----> 10

  2. Use the Syntax - A(M).
     A is the array's name, M is the particular element's index when traversing down each column in order.
     A(7) -----> 10
     Note: This approach is also called "linear indexing".

- Extending Array Size
  Referring to an element outside the array causes the "Index Exceeds Matrix Dimensions" error.

  Assuming there is an array named A as follows.
    1   2   3
    4   5   6
    7   8   9

  A(3, 4) -----> Index exceeds matrix dimensions.

  But assigning an element outside the array runs normally and extends the array's size.
  And the new elements except the specified one will have a default value as 0.

  A(3, 4) = 10
  extends the array A's size from 3x3 to 3x4.
    1   2   3   0
    4   5   6   0
    7   8   9   10

  A(5, 2) = 12
  extends the array A's size again from 3x4 to 5x4.
    1   2   3   0
    4   5   6   0
    7   8   9   10
    0   0   0   0
    0   12  0   0

- Listing Workspace Variables
  The command "whos" lists variables in workspace, with sizes and types.

  Assuming the following commands have been executed.
    array1 = rand(3)
    array2 = [3 + 4i, 4 + 3j; -i, 10j]
    array3 = rand(3, 5, 2)
    array4 = 'ABC'

  Then executing the command "whos" returns a result as follows.
    Name        Size             Bytes  Class     Attributes
    array1      3x3                 72  double
    array2      2x2                 64  double    complex
    array3      3x5x2              240  double
    array4      1x3                  6  char

  And executing the command "whos array1" returns a result as follows.
    Name        Size             Bytes  Class     Attributes
    array1      3x3                 72  double

- Saving/Loading Workspace Variables
  Workspace variables do not persist after exiting MATLAB.
  Using the "save" and "load" commands to save and load workspace variables into/from MAT-files (.mat).
    Command                     Description
    --------------------------------------------------------------------------------------------------------------------
    save data
    OR
    save('data.mat')            Save all variables in the workspace into the MAT-file named "data.mat".

    save data array1
    OR
    save('data.mat', 'array1')  Save the variable "array1" in the workspace into the MAT-file named "data.mat".

    save data array1 array2
    OR
    save('data3.mat', 'array1', 'array2')
                                Save the variables "array1" and "array2" in the workspace into the MAT-file named "data.mat".

    load data
    OR
    load('data.mat')            Load all variables in the MAT-file named "data.mat" into the workspace.

    load data array1
    OR
    load('data.mat', 'array1')  Load the variable "array1" in the MAT-file named "data.mat" into the workspace.

    load data array1 array2
    OR
    load('data.mat', 'array1', 'array2')
                                Load the variables "array1" and "array2" in the MAT-file named "data.mat" into the workspace.

- Text and Characters
  - Enclosing a sequence of character in a pair of single quotes ('') creates a text.
    e.g. someText = 'Hello, World!'

  - Using 2 single quotes in a text to escape a single quote.
    e.g. someText = 'You''re right.'

  - All texts are arrays which class (or say "data type") is "char" (short for "character").

  - Character arrays can be concatenated like the numeric arrays, using a pair of brackets ([]).
    e.g.
        someText1 = 'Hi, ';
        someText2 = 'beautiful Tee, ';
        [someText1 someText2 'welcome to the MATLAB world!']

        Hi, beautiful Tee, welcome to the MATLAB world!

  - Numeric values can be converted to characters, using functions such as "num2str" or "int2str".
    e.g.
        birthYear = 1977;
        age = 40;
        ['Ray was born in ', num2str(birthYear), ', and his age is nearly ', int2str(age), ' now.']

        Ray was born in 1977, and his age is nearly 40 now.

    e.g.
        temperatureAsFahrenheit = 71;
        temperatureAsCelsius = (temperatureAsFahrenheit - 32) / 1.8;
        ['The temperature is ' num2str(temperatureAsCelsius) ' C.']

        The temperature is 21.6667 C.

- Calling Functions
  The syntax to call a function is: F(A1, A2, ..., An).
  F is the function's name.
  A1, A2 and An are the names of the function's arguments.
  A function can have no arguments.

    e.g.
        clear
        OR
        clear()                                     Call a function with no arguments.
        rand(3)                                     Call a function with 1 argument.
        load('data.mat', 'array1')                  Call a function with 2 arguments.
        plot(x, y, 'rs')                            Call a function with 3 arguments.

- Accepting Function Outputs
  If a function returns a single output, that output can be assigned to a variable;
  if a function returns multiple outputs, those outputs can be assigned to multiple variables enclosed by a pair of brackets ([]).
    e.g.
        maxValue = max(values);                     Assign the single function output to a variable.
        [maxValue, maxValueIndex] = max(values);    Assign the multiple function outputs to variables.

- 2D Plotting
  - To create 2D plots, use the "plot" function.
      e.g. Plot the sine values against the values from 0 to 2PI.
          x = 0 : pi / 100 : 2 * pi;
          y = sin(x);
          plot(x, y);

  - To add a title to a plot, use the "title" function.
      e.g.
          title('Sine Values Plot');

  - To add a label on the X/Y axis, use the "xlabel"/"ylabel" function.
      e.g.
          xlabel('Values');
          ylabel('Sine Values');

- 2D Plotting with Line Specification
  When plotting, a line specification (line style, marker symbol and color) can be specified by providing a string as the 3rd argument of the "plot" function.
    e.g.
        x = 1:2:19;
        y = 2:2:20;

        plot(x, y, '--');       MC: Plot the lines as dashed lines instead of the default solid lines.
        plot(x, y, 'r');        MC: Plot using the red color instead of the default blue color.
        plot(x, y, 's');        MC: Plot marker symbols as squares instead of lines.
        plot(x, y, '--rs');     MC: Plot dashed lines and marker symbols as squares in red color.

- 3D Plotting
  - To create 3D plots, use the "meshgrid" and "surf" functions.

    Steps
    #1. Generate X and Y data points, using the "meshgrid" function.
    #2. Generate Z data points, using some function with X and Y data points as the arguments.
    #3. Create the 3D plot, using the "surf" function with X, Y and Z data points as the arguments.

    e.g.
        [x, y] = meshgrid(-2 : .2 : 2);
        z = x .* exp(-x .^ 2 - y .^ 2);
        surf(x, y, z);

    e.g.
        [a, b] = meshgrid(-3 : .25 : 3);
        c = exp(-a .^ 2 - b .^ 2);
        surf(a, b, c);

  - To display multiple plots in different subregions of the same window, use the "subplot" function.

    e.g.
        t = 0 : pi / 10 : 2 * pi;
        [X, Y, Z] = cylinder(4 * cos(t));
        subplot(2, 2, 1); mesh(X); title('X');
        subplot(2, 2, 2); mesh(Y); title('Y');
        subplot(2, 2, 3); mesh(Z); title('Z');
        subplot(2, 2, 4); mesh(X, Y, Z); title('X, Y, Z');

- Adding New Plots to Existing Plots
  By default, MATLAB clears existing plots when calling a plotting function.
  To add new plots to existing plots, use the "hold on" command.
  Then, until using the "hold off" command or closing the plot window, all new plots will be added to existing plots.
    e.g.
        x = 0 : pi / 100 : 2 * pi;
        y = sin(x);
        plot(x, y);

        hold on;

        y2 = cos(x);
        plot(x, y2, ':');
        legend('sin', 'cos');

        hold off;

- Programming and Scripts
  - The simplest type of MATLAB program is a script.
    A script is a file with a ".m" extension that contains multiple sequential lines of MATLAB commands and function calls.
    A script can be run by typing its name at the command line.

  - To create a script, use the "edit" command.
    e.g.
        edit plotMeanOfRandomData
        OR
        edit 'plotMeanOfRandomData'
        OR
        edit('plotMeanOfRandomData')      MC: A script which name is "plotMeanOfRandomData" and file name is "plotMeanOfRandomData.m" is created.

  - To add some comments, use the percent (%) symbol.
    e.g.
        % Generate a random data and calculate its mean.
        % Plot the random data and its mean then.

        n = 50;     % Use 50 data points.

  - To run a script, type the script's name and press the Enter key.
    e.g.
        plotMeanOfRandomData

- Loops and Conditional Statements
  - The "for" and "while" statements are used as the loop statements.
  - The "if" and "switch" statements are used as the conditional statements.

  e.g.
    nsamples = 5;
    npoints = 50;

    for k = 1 : nsamples
       iterationString = ['Iteration #', int2str(k)];
       disp(iterationString)
       currentData = rand(npoints, 1);
       sampleMean(k) = mean(currentData)
    end

    overallMean = mean(sampleMean)

    if overallMean < .49
       disp('The mean is less than expected!')
    elseif overallMean > .51
       disp('The mean is greater than expected!')
    else
       disp('The mean is within the expected range.')
    end

  - Script Locations
    MATLAB looks for scripts and other files in certain places called as the MATLAB search path.
    If the scripts are not on the MATLAB search path, be sure to add the scripts' locations to the MATLAB search path.

- Help and Documentation
  There are several ways to access a function's documentation.
  Approach                  Description
  ------------------------------------------------------------------------------
  <In the Command Window>
  doc targetFunction        Open a separate window containing the target function's documentation.
  help targetFunction       Display an abbreviated version of the target function's documentation in the Command Window.
  targetFunction <F1>       Display a pop-up containing the target function's documentation in the Command Window.
  targetFunction(           Display the syntax portion of the target function's documentation in the Command Window, by pausing after typing the open parenthesis following the function's name.

  <Misc>
  Clicking the ? Button in the Home/Shortcut Tool Bar
                            Open a separate window containing the documentation's home page.
  Inputting the Target Function's Name in the Search Box of the Shortcut Tool Bar
                            Open a separate window containing the target function's documentation, after clicking the proper suggestion item in the dropdown list from that search box.

--------------------------------------------------------------------------------

- Entering the Commands
  - To suppress a command's output, end that command with a semicolon (;).
  - To enter multiple statements on multiple lines, use SHIFT + ENTER instead of Enter for a new line.
    Note: This action is unnecessary when using a paired keyword statement such as "for ... end".
  - To enter multiple statements on one line, use commas (,) or semicolons (;) to separate commands.
    Commands ending with a comma have output, while commands ending with a semicolon have no output.
  - To recall previous commands, press UP.
  - To clear current command, press ESC.
  - To evaluate some statement (even it is a command portion), select it, right click, and select the Evaluate Selection command (or press F9).
  - To execute some statement (even it is a command portion), select it, press Enter.

- Formatting Output
  MATLAB displays output in both the Command Window and the Live Editor.
  And the output display can be formatted in several approaches.
  Note: Changing the output's format does not change the corresponding value.

  - Formatting Line Spacing
    - To add blank lines in the output, use the command "format loose". (default)
    - To suppress excess blank lines in the output, use the command "format compact".
    OR
    - Choose the "loose" or "compact" option at HOME (ENVIRONMENT) > Preferences > MATLAB > Command Window > Text Display > Numeric Display.

  - Formatting Floating-Point Numbers
    To change the display format of the floating-point numbers,
    - Use the function "format" with proper arguments, such as follows.
        Assuming the command "x = [4/3 1.2345e-6]" is executed.
        Arguments               Result                                      Remarks
        ----------------------------------------------------------------------------------------------------------------
        short                   x = 1.3333 0.0000                           The default format.
        short e                 x = 1.3333e+00 1.2345e-06
        long                    x = 1.333333333333333 0.000001234500000
        +                       x = ++
    OR
    - Choose a proper option at HOME (ENVIRONMENT) > Preferences > MATLAB > Command Window > Text Display > Numeric Format.

  - Wrapping Input/Output to Fit Window Width
    A line of code or its output can exceed the width of the Command Window, causing the horizontal scroll bar to appear.
    To break the input/output into multiple lines to fit the current width of the Command Window,
    check the Wrap Lines option at HOME (ENVIRONMENT) > Preferences > MATLAB > Command Window > Display.

  - Suppressing the Output
    To suppress the output of a command, end that command with a semicolon (;).

  - Viewing the Output by Page
    - To view the output by page, use the command "more on".
      Then, after a command with large output is executed,
      to advance to the next line, press Enter (actually, any key?);
      to advance to the next page, press Space Bar;
      to stop displaying the output, press q.

  - Clearing the Command Window
    To clear the Command Window,
    - use the "clc" function,
    - select the Command Window option at HOME (CODE) > Clear Commands,
    - use the "home" function (without clearing the scroll buffer).

- Continuing Long Statements on Multiple Lines
  - To continue long statements on multiple lines, use an ellipsis (...).
    e.g.
        <OK>
        someValue = 1 + 2 + 3 + 4 ...
                  + 5 + 6 + 7 + 8
        ->
        someValue = 36

        <NG>
        someValue = 1 + 2 + 3 + 4 <SHIFT + ENTER>
                  + 5 + 6 + 7 + 8
        ->
        someValue = 10
        ans = 26

        <OK>
        someValue = ['Xxx1 ' 'Xxx2 ' 'Xxx3 ' ...
                     'Xxx4 ' 'Xxx5']
        ->
        someValue = 'Xxx1 Xxx2 Xxx3 Xxx4 Xxx5'

        <NG>
        someValue = ['Xxx1 ' 'Xxx2 ' 'Xxx3 ' <SHIFT + ENTER>
                     'Xxx4 ' 'Xxx5']
        ->
        <Some Error Occurred>

  - The start and end quotation marks for a character vector must appear on the same line.
    e.g.
        <NG>
        someValue = 'Xxx1 Xxx2 Xxx3 ...
                     Xxx4 Xxx5'
        ->
        <Some Error Occurred>

        <OK>
        someValue = ['Xxx1 Xxx2 Xxx3 ' ...
                     'Xxx4 Xxx5']
        ->
        someValue = 'Xxx1 Xxx2 Xxx3 Xxx4 Xxx5'

  - An ellipsis outside a quoted text is equivalent to a space.
    e.g.
        MC: The variables "a", "b" and "c" have same content.
        a = [123 456 789]
        b = [123,456,789]
        c = [123 ...
             456 ...
             789]

- Creating Shortcuts
  - To create a shortcut,
    - select HOME (FILE) > New > Command Shortcut or SHORTCUTS (MANAGE) > New Shortcut,
    - input necessary information in the Shortcut Editor window and save.

  - To edit/delete a shortcut,
    - select SHORTCUTS (MANAGE) > Organize Shortcuts or
    - right click the shortcut's button at the Quick Access Toolbar or SHORTCUTS (GENERAL).

  - To run a shortcut,
    click the shortcut's button at the Quick Access Toolbar or SHORTCUTS (GENERAL).

- Stopping a Command's Execution
  - To stop a command's execution, press CTRL + C or CTRL + BREAK.
  - CTRL + C does not always stop execution for files that run a long time, or that call built-ins or MEX-files that run a long time.
    If so, include a drawnow/pause/getframe function in the file (e.g. within a large loop).
  - CTRL + C might be less responsive if starting MATLAB with the -nodesktop option.

- Finding Functions
  - To open a browser to find functions (the Function Browser),
    - click the Functions button (displayed as fx) left to the command prompt in the Command Window, or in the EDITOR (EDIT) toolbar, or
    - press SHIFT + F1.
  - The Function Browser closes when the mouse pointer is moved outside of it.
    To keep it open, drag it to a different location.
  - By default, all functions from all installed products are searched.
    To select a subset of installed products, click the All Installed Products button at the bottom of the Function Browser.
  - To find functions, input a search term in the search box of the Function Browser.
    In the search results, a parenthetical term after a function name indicates
    either that the function is in a product folder other than MATLAB, or that there are multiple functions with the same name.
    e.g. The "fft (comm)" result indicates the "fft" function is from the Communications System Toolbox folder.
  - To insert a function into the current window, double click the function.
    Alternatively, drag the function to any proper position.
  - To view a function's syntax information, click a function or move the mouse pointer on it for a while,
    then a pop-up with that function's syntax information displays.
    To keep the pop-up open, drag it to a different location.

- Finding Text
  - To find a text in the Command Window using the Find dialog,
    select the Command Window's title bar > the Down Arrow button > the Find... button.
    - All texts include the visible texts and those texts in the scroll buffer can be searched.
    - The "clc" function empties the scroll buffer, thus the cleared text is no longer searchable.
      To clear the display without emptying the scroll buffer, use the "home" function.
  - To find a text in the Command Window using an incremental search,
    press Ctrl + Shift + S for a forward search or Ctrl + Shift + R for a backward search,
    then input a search term, and optionally perform any of the following actions,
        Action                                                      Keyboard Shortcut
        ----------------------------------------------------------------------------------------------------------------
        Complete a partially highlighted set of characters.         CTRL + W
        Find the next occurrence of a set of characters.            CTRL + S
        Back to the last successful search.                         CTRL + G
    finally end the search by pressing ESC, ENTER, or any other key that is not a character or number.

    Note: When inputting lowercase letters, both corresponding lowercase and uppercase letters are searched;
          when inputting uppercase letters, only corresponding uppercase letters are searched.
  - To find a text in the Command History using the Find dialog,
    select the Command History's title bar > the Down Arrow button > the Find... button.

- Checking Syntax as Typing
  - Syntax Highlighting
    Syntax highlighting means some MATLAB elements appear in different colors in the Command Window and the Editor.

    e.g.
        % Create a file for output.         MC: By default, comments display in green color.
        !touch testFile.txt                 MC: By default, system commands display in olive color.
        fid = fopen('testFile.txt', 'w');   MC: By default, strings display in purple color.
        for i = 1:10                        MC: By default, keywords display in blue color.
            fprintf(fid, '%6.2f \n, i);     MC: By default, unterminated strings display in maroon color.
        end

        >> sampleFunction
        Link to sample: {link}              MC: By default, links display in blue color.
        Warning: Min value set to 0         MC: By default, warnings display in coral color.
        > In sampleFunction at 4
        Error using sampleFunction          MC: By default, errors display in red color.
        Invalid type

    Note: Except for errors, output in the Command Window does not appear with syntax highlighting.

  - Delimiter Matching
    MATLAB indicates matched and mismatched delimiters, such as parentheses, brackets, and braces, to help avoiding syntax errors.
    MATLAB also indicates paired language keywords, such as for, if, while, else, and end statements.
    By default, MATLAB indicates delimiter matching as follows.
    - When typing a closing delimiter, MATLAB highlights or underlines the corresponding opening delimiter.
    - When typing more closing delimiters than opening delimiters, MATLAB puts a strike line through or underlines the unmatched delimiter.
    - When moving the mouse cursor over one delimiter, MATLAB underlines both delimiters in a pair.
      If no corresponding delimiter exists, MATLAB puts a strike line through the unmatched delimiter.
      If a matching delimiter exists but not visible, a pop-up appears showing the line containing the matching delimiter.

  - Tab Completion
    MATLAB can help avoiding typographical errors by completing the names of MATLAB elements.
    It is done by typing the first few characters of a name then pressing the TAB key.
    If there are multiple matches for the rest of the name, a pop-up displays containing those matches.
    Use the UP and DOWN keys to select a match in the pop-up, and press the TAB or ENTER key to complete the name.

  - Function Syntax Hints
    ...

- Writing to a Diary File
  To keep an activity log of a session, use the "diary" function, as follows.
  1. Turn on the diary function, by executing the command "diary" or "diary {Diary File's Name}".
     Note: If the diary file's name is not provided, the default name "diary" is used.
  2. Do anything that should be kept in the diary file.
  3. Turn off the diary function, by executing the command "diary off".

- Variable Names
  - Valid Variable Names
    - A valid variable name starts with a letter, followed by letters, digits, or underscores.
    - MATLAB is case sensitive, so "a" and "A" are different variables.
    - The maximum length of a variable name is the value that the "namelengthmax" command returns (an example value in Windows 7 is 63).
    - A variable name cannot be same as one of MATLAB keywords (e.g. 'if', 'end').
      The "iskeyword" function helps to determine whether a name is a keyword.
        e.g.
            iskeyword('abc')            -> 0 (The name "abc" is not a keyword name)
            iskeyword('end')            -> 1 (The name "end" is a keyword name)

  - Conflicts with Function Names
    - Avoid creating variables with the same name as a function (e.g. 'i', 'j', 'mode', 'char', 'size', and 'path').
    - In general, variable names take precedence over function names. But, if creating a variable that uses the name of a function, sometimes unexpected results occur.
    - To check whether a name is already in use, use the "exist" or "which" function.
        e.g.
            exist('doSomething')        -> 0 (There is no MATLAB element named "doSomething")
            exist('sin')                -> 1 (At least one MATLAB element named "sin" exists)
            which('setup')              -> 'setup' not found. (There is no MATLAB function/file named "setup")
            which('clean')              -> C:\Users\rchen\Documents\MATLAB\clean.m (At least one MATLAB function/file named "setup" exists)

- Case and Space Sensitivity
  - MATLAB code is sensitive to casing, and insensitive to spaces except when defining arrays.
    It is a best practice to use lowercase only when naming functions. MC: By far, do not agree.
  - Spaces around operators are optional, but do improve readability.

- Command Syntax vs. Function Syntax
  - MATLAB supports 2 types of syntax - Command Syntax and Function Syntax, to execute statements, as follows.
      Command Syntax    : someFunction someArgument1 someArgument2
      Function Syntax   : someFunction(someArgument1, someArgument2)

    e.g.
        disp 'abc'
        disp abc
        disp('abc')
        disp(['abc'])

  - Pros and Cons
    Syntax                  Pros                            Cons
    ------------------------------------------------------------------------------------------------
    Command Syntax          - Simpler                       - No output
                                                            - All inputs must be character vectors.
                                                            - Easy to cause confusion and bugs.
    Function Syntax         - General-purpose               - More typing
                            - Can have output
                            - Inputs can be any valid types.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- Line Specification
  - The line specification includes
    - the style of the lines,
    - the symbol of the data points' markers, and
    - the color used to render the lines and the markers.

  - The line specification is specified by a string containing pre-defined character sequences as follows.
    Note: All specifiers are case insensitive.

    Line Style Specifiers (Count: 4)
      Specifier           Description
      ----------------------------------------------------
      '-'                 Plot the lines as solid lines (default).
      '--'                Plot the lines as dashed lines.
      ':'                 Plot the lines as dotted lines.
      '-.'                Plot the lines as dash-dot lines.

    Marker Symbol Specifiers (Count: 13)
      Specifier           Description
      ----------------------------------------------------
      '+'                 Plot the marker symbols as the plus signs.
      'o'                 Plot the marker symbols as the circles.
      '*'                 Plot the marker symbols as the asterisk.
      '.'                 Plot the marker symbols as the points.
      'x'                 Plot the marker symbols as the crosses.
      's' or 'square'     Plot the marker symbols as the squares.
      'd' or 'diamond'    Plot the marker symbols as the diamond signs.
      '^'                 Plot the marker symbols as the upward-pointing triangles.
      'v'                 Plot the marker symbols as the downward-pointing triangles.
      '>'                 Plot the marker symbols as the right-pointing triangles.
      '<'                 Plot the marker symbols as the left-pointing triangles.
      'p' or 'pentagram'  Plot the marker symbols as the five-pointed stars (pentagram).
      'h''' or 'hexagram' Plot the marker symbols as the six-pointed stars (hexagram).

      Note: The point ('.') marker symbol does not change the size when the specified value is less than 5.

    Color Specifiers (Count: 8)
      Specifier           Description
      ----------------------------------------------------
      'r'                 Plot using the red color.
      'g'                 Plot using the green color.
      'b'                 Plot using the blue color (default).
      'y'                 Plot using the yellow color.
      'k'                 Plot using the black color.
      'w'                 Plot using the white color.
      'c'                 Plot using the cyan color.
      'm'                 Plot using the magenta color.

- Operators and Elementary Operations
  Note: Unless otherwise specified, all operators' corresponding functions are rarely used.

  ++++++++++
  Contents
  ++++++++++
  Arithmetic Operators/Operations (Addition, Subtraction, Multiplication, Division, Power, Rounding, etc.)
      + plus      | - minus    | .* times   | * mtimes   | ./ rdivide | .\ ldivide | / mrdivide | \ mldivide |  (8)
      + uplus     | - uminus   | .^ power   | ^ mpower   |                                                      (4)
      sum         | cumsum     | diff       | prod       | cumprod    |                                         (5)
      movsum      |                                                                                             (1)
      idivide     | mod        | rem        |                                                                   (3)
      fix         | round      | floor      | ceil       |                                                      (4)
      bsxfun      |                                                                                             (1)
                                                                                                               [26]
  Relational Operators/Operations (Various Value Comparisons)
      == eq       | ~= ne      | < lt       | <= le      | > gt       | >= ge      |                            (6)
      isequal     | isequaln   |                                                                                (2)
                                                                                                                [8]
  Logical Operators/Operations (Processing Boolean Conditions)
      ~ not       | & and      | | or       | xor        | && and (SC)| || or (SC) |                            (6)
      true        | false      | any        | all        | find       | islogical  | logical    |               (7)
                                                                                                               [13]

  Set Operations (Processing Unions, Intersection, Set Membership, etc.)
      issorted    | ismember   | ismembertol| unique     | uniquetol  |                                         (5)
      union       | intersect  | setdiff    | setxor     |                                                      (4)
      join        | innerjoin  | outerjoin  |                                                                   (3)
                                                                                                               [12]

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Arithmetic Operators/Operations (Addition, Subtraction, Multiplication, Division, Power, Rounding, etc.)

  + plus      | - minus    | .* times   | * mtimes   | ./ rdivide | .\ ldivide | / mrdivide | \ mldivide |      (8)
  + uplus     | - uminus   | .^ power   | ^ mpower   |                                                          (4)

  sum         | cumsum     | diff       | prod       | cumprod    |                                             (5)
  -- SKIPPED ITEMS -----------------------------------------------------------------------------------------------------
  movsum      |                                                                                                 (1)
  ----------------------------------------------------------------------------------------------------------------------

  idivide     | mod        | rem        |                                                                       (3)
  fix         | round      | floor      | ceil       |                                                          (4)

  -- SKIPPED ITEMS -----------------------------------------------------------------------------------------------------
  bsxfun      |                                                                                                 (1)
  ----------------------------------------------------------------------------------------------------------------------
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  Operator      Function        Description
  ------------------------------------------------------------------------------------------------------------------------
  +             plus            Perform an addition operation.

                                e.g. Add a scalar to another scalar.
                                    1 + 2
                                        3

                                    1 + 0.5
                                        1.5000

                                    4 + (-1.5)
                                        2.5000

                                e.g. Add a scalar to an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data + 1
                                        2   3   4
                                        5   6   7
                                        8   9  10

                                e.g. Add an array to another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    data1 + data2
                                        6   8
                                       10  12

                                e.g. Add a vector to an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data + [3 6 9]
                                        4   8  12
                                        7  11  15
                                       10  14  18

                                    data + [3 6 9]'
                                        4   5   6
                                       10  11  12
                                       16  17  18

                                e.g. Add a string array to another string array (concatenate strings).
                                    data1 = string({'Red' 'Blue' 'Green'})
                                        "Red"   "Blue"  "Green"

                                    data2 = string({'Flag' 'Sky' 'Tree'})
                                        "Flag"  "Sky"   "Tree"

                                    data1 + ' ' + data2
                                        "Red Flag"  "Blue Sky"  "Green Tree"

                                e.g. Use the function "plus".
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    plus(data1, data2)
                                        6   8
                                        10 12

  -             minus           Perform a subtraction operation.

                                e.g. Subtract a scalar from another scalar.
                                    2 - 1
                                        1

                                    1 - 0.5
                                        0.5000

                                    4 - 7.5
                                        -3.5000

                                e.g. Subtract a scalar from an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data - 1
                                        0   1   2
                                        3   4   5
                                        6   7   8

                                e.g. Subtract an array from another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 5; 5 5]
                                        5   5
                                        5   5

                                    data2 - data1
                                        4   3
                                        2   1

                                e.g. Subtract a vector from an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data - [3 6 9]
                                       -2  -4  -6
                                        1  -1  -3
                                        4   2   0

                                    data - [3 6 9]'
                                       -2  -1   0
                                       -2  -1   0
                                       -2  -1   0

                                e.g. Use the function "minus".
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 5; 5 5]
                                        5   5
                                        5   5

                                    minus(data2, data1)
                                        4   3
                                        2   1

 .*             times           Perform an element-wise multiplication operation.

                                e.g. Multiply a scalar by another scalar.
                                    1 .* 2
                                        2

                                    3 .* 2.5
                                        7.5000

                                    4 .* -1.25
                                        -5

                                e.g. Multiply a scalar by an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data .* 2
                                        2   4   6
                                        8  10  12
                                       14  16  18

                                e.g. Multiply an array by another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    data1 .* data2
                                        5  12
                                       21  32

                                e.g. Multiply a vector to an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data .* [3 6 9]
                                        3  12  27
                                       12  30  54
                                       21  48  81

                                    data .* [3 6 9]'
                                        3   6   9
                                       24  30  36
                                       63  72  81

  *             mtimes          Perform a matrix multiplication operation.

                                e.g. Multiply an array by another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    data1 * data2
                                       19  22
                                       43  50


                                e.g. Multiply a row vector by a column vector.
                                    data1 = [1 2 3 4]
                                        1   2   3   4

                                    data2 = [5 6 7 8]'
                                        5
                                        6
                                        7
                                        8

                                    data1 * data2
                                       70

  ./            rdivide         Perform a right array division operation.

                                e.g. Divide a scalar by another scalar.
                                    4 ./ 2
                                        2

                                    1 ./ 2
                                        0.5000

                                    4 ./ -2
                                        -2

                                e.g. Divide an array by a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data ./ 2
                                        0.5000  1.0000  1.5000
                                        2.0000  2.5000  3.0000
                                        3.5000  4.0000  4.5000

                                e.g. Divide an array by a scalar (using integer division).
                                    data = int16([1 2 3; 4 5 6; 7 8 9])
                                        <int16>
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data ./ 2
                                        1   1   2
                                        2   3   3
                                        4   4   5

                                e.g. Divide an array by another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    data2 ./ data1
                                        5.0000  3.0000
                                        2.3333  2.0000

                                e.g. Divide an array by a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data ./ [3 6 9]
                                        0.3333  0.3333  0.3333
                                        1.3333  0.8333  0.6667
                                        2.3333  1.3333  1.0000

                                    data ./ [3 6 9]'
                                        0.3333  0.6667  1.0000
                                        0.6667  0.8333  1.0000
                                        0.7778  0.8889  1.0000

  .\            ldivide         Perform a left array division operation.

                                e.g. Divide a scalar by another scalar.
                                    2 .\ 4
                                        2

                                    2 .\ 1
                                        0.5000

                                    -2 .\ 4
                                        -2

                                e.g. Divide an array by a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    2 .\ data
                                        0.5000  1.0000  1.5000
                                        2.0000  2.5000  3.0000
                                        3.5000  4.0000  4.5000

                                e.g. Divide an array by a scalar (using integer division).
                                    data = int16([1 2 3; 4 5 6; 7 8 9])
                                        <int16>
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    2 .\ data
                                        1   1   2
                                        2   3   3
                                        4   4   5

                                e.g. Divide an array by another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    data1 .\ data2
                                        5.0000  3.0000
                                        2.3333  2.0000

                                e.g. Divide an array by a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    [3 6 9] .\ data
                                        0.3333  0.3333  0.3333
                                        1.3333  0.8333  0.6667
                                        2.3333  1.3333  1.0000

                                    [3 6 9]' .\ data
                                        0.3333  0.6667  1.0000
                                        0.6667  0.8333  1.0000
                                        0.7778  0.8889  1.0000

  /             mrdivide        Perform a right matrix division operation.

                                e.g. Divide a scalar by another scalar.
                                    4 / 2
                                        2

                                    1 / 2
                                        0.5000

                                    4 / -2
                                        -2

                                e.g. Divide an array by a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data / 2
                                        0.5000  1.0000  1.5000
                                        2.0000  2.5000  3.0000
                                        3.5000  4.0000  4.5000

                                e.g. Divide an array by a scalar (using integer division).
                                    data = int16([1 2 3; 4 5 6; 7 8 9])
                                        <int16>
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data / 2
                                        1   1   2
                                        2   3   3
                                        4   4   5

                                e.g. Divide an array by another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    data2 / data1
                                        -1.0000 2.0000
                                        -2.0000 3.0000

                                e.g. Divide an array by a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data / [3 6 9]
                                        0.3333
                                        0.7619
                                        1.1905

                                    data / [3 6 9]'
                                        <Error: Matrix dimensions must agree.>

  \             mldivide        Perform a left matrix division operation.

                                e.g. Divide a scalar by another scalar.
                                    2 \ 4
                                        2

                                    2 \ 1
                                        0.5000

                                    -2 \ 4
                                        -2

                                e.g. Divide an array by a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    2 \ data
                                        0.5000  1.0000  1.5000
                                        2.0000  2.5000  3.0000
                                        3.5000  4.0000  4.5000

                                e.g. Divide an array by a scalar (using integer division).
                                    data = int16([1 2 3; 4 5 6; 7 8 9])
                                        <int16>
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    2 \ data
                                        1   1   2
                                        2   3   3
                                        4   4   5

                                e.g. Divide an array by another array.
                                    data1 = [1 2; 3 4]
                                        1   2
                                        3   4

                                    data2 = [5 6; 7 8]
                                        5   6
                                        7   8

                                    data1 \ data2
                                       -3  -4
                                        4   5

                                e.g. Divide an array by a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    [3 6 9] \ data
                                        <Error: Matrix dimensions must agree.>

                                    [3 6 9]' \ data
                                        0.7143  0.8571  1.0000

  +             uplus           Perform a (unary) plus operation.

                                e.g. Make a scalar plus.
                                    +2
                                        2

                                    +(-2)
                                        -2

                                e.g. Make an array plus.
                                    data = [1 -2 3; 4 5 -6; -7 8 9]
                                        1  -2   3
                                        4   5  -6
                                       -7   8   9

                                    +data
                                        1  -2   3
                                        4   5  -6
                                       -7   8   9

  -             uminus          Perform a (unary) minus operation.

                                e.g. Make a scalar minus.
                                    -2
                                        -2

                                    -(-2)
                                        2

                                e.g. Make an array minus.
                                    data = [1 -2 3; 4 5 -6; -7 8 9]
                                        1  -2   3
                                        4   5  -6
                                       -7   8   9

                                    -data
                                       -1   2  -3
                                       -4  -5   6
                                        7  -8  -9

  .^            power           Perform an element-wise power operation.

                                e.g. Perform a power on a scalar.
                                    3 .^ 2
                                        9

                                    0.5 .^ 3
                                        0.1250

                                    -2 .^ 4
                                        -16

                                    2 .^ -1
                                        0.5000

                                e.g. Perform a power on a vector.
                                    [1 2 3] .^ 2
                                        1   4   9

                                    [1 2 3]' .^ 2
                                        1
                                        4
                                        9

                                e.g. Perform a power (scalar) on an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data .^ 2
                                        1   4   9
                                       16  25  36
                                       49  64  81

                                e.g. Perform a power (vector) on an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data .^ [4 3 2]
                                        1   8   9
                                      256 125  36
                                     2401 512  81

                                    data .^ ([4 3 2]')
                                        1  16  81
                                       64 125 216
                                       49  64  81

                                e.g. Perform a power (array) on an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    power = [4 4 4; 3 3 3; 2 2 2]
                                        4   4   4
                                        3   3   3
                                        2   2   2

                                    data .^ power
                                        1  16  81
                                       64 125 216
                                       49  64  81

  ^             mpower          Perform a matrix power operation.

                                e.g. Perform a power on a scalar.
                                    3 ^ 2
                                        9

                                    0.5 ^ 3
                                        0.1250

                                    -2 ^ 4
                                        -16

                                    2 ^ -1
                                        0.5000

                                e.g. Perform a power on a vector.
                                    [1 2 3] ^ 2
                                        <Error: Inputs must be a scalar and a square matrix.>

                                    [1 2 3]' ^ 2
                                        <Error: Inputs must be a scalar and a square matrix.>

                                e.g. Perform a power (scalar) on an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data ^ 2
                                       30  36  42
                                       66  81  96
                                      102 126 150

                                e.g. Perform a power (vector) on an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data ^ [4 3 2]
                                        <Error: Inputs must be a scalar and a square matrix.>

                                    data ^ ([4 3 2]')
                                        <Error: Inputs must be a scalar and a square matrix.>

                                e.g. Perform a power (array) on an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    power = [4 4 4; 3 3 3; 2 2 2]
                                        4   4   4
                                        3   3   3
                                        2   2   2

                                    data ^ power
                                        <Error: Inputs must be a scalar and a square matrix.>

  ----          sum             Calculate the sums of array elements.

                                e.g. Calculate the sums of a vector.
                                    sum([1 2 3])
                                        6

                                    sum([1 2 3]')
                                        6

                                    sum(1:5)
                                        15

                                e.g. Calculate the sums of an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    sum(data)
                                       12  15  18

                                    sum(data, 1)
                                        12  15  18

                                    sum(data, 2)
                                        6
                                       15
                                       24

                                    data = rand(4, 3, 2)
                                        data(:, :, 1) =
                                            0.5134  0.0309  0.3329
                                            0.1776  0.9391  0.4671
                                            0.3986  0.3013  0.6482
                                            0.1339  0.2955  0.0252

                                        data(:, :, 2) =
                                            0.8422  0.4460  0.3308
                                            0.5590  0.0542  0.8985
                                            0.8541  0.1771  0.1182
                                            0.3479  0.6628  0.9884

                                    sum(data)
                                        ans(:, :, 1) =
                                            1.2235  1.5669  1.4734

                                        ans(:, :, 2) =
                                            2.6032  1.3402  2.3359

                                    sum(data, 1)
                                        ans(:, :, 1) =
                                            1.2235  1.5669  1.4734

                                        ans(:, :, 2) =
                                            2.6032  1.3402  2.3359

                                    sum(data, 2)
                                        ans(:, :, 1) =
                                            0.8772
                                            1.5838
                                            1.3481
                                            0.4547

                                        ans(:, :, 2) =
                                            1.6191
                                            1.5118
                                            1.1494
                                            1.9991

                                    sum(data, 3)
                                        1.3556    0.4769    0.6638
                                        0.7366    0.9934    1.3656
                                        1.2527    0.4784    0.7664
                                        0.4818    0.9583    1.0136

                                e.g. Calculate the sums of an array including NaN values.
                                    data = [1 2 3; 4 NaN 6; 7 8 9]
                                        1   2   3
                                        4 NaN   6
                                        7   8   9

                                    sum(data)
                                       12 NaN  18

                                    % Perform the calculation, excluding NaN values.
                                    sum(data, 'omitnan')
                                       12  10  18

  ----          cumsum          Calculate the cumulative sums of array elements.

                                e.g. Calculate the cumulative sums of a vector.
                                    cumsum([1 2 3])
                                        1   3   6

                                    cumsum([1 2 3]')
                                        1
                                        3
                                        6

                                    cumsum(1:5)
                                        1   3   6   10  15

                                e.g. Calculate the cumulative sums of an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    cumsum(data)
                                        1   2   3
                                        5   7   9
                                       12  15  18

                                    cumsum(data, 1)
                                        1   2   3
                                        5   7   9
                                       12  15  18

                                    cumsum(data, 2)
                                        1   3   6
                                        4   9  15
                                        7  15  24

  ----          diff            Calculate the differences of array elements.

                                e.g. Calculate the differences of a vector.
                                    diff([2 5 7 3 8])
                                        3   2  -4   5


                                    diff([2 5 7 3 8]')
                                        3
                                        2
                                       -4
                                        5

                                e.g. Calculate the differences of an array.
                                    data = magic(3)
                                        8   1   6
                                        3   5   7
                                        4   9   2

                                    diff(data)
                                       -5   4   1
                                        1   4  -5

                                    diff(data, 1, 1)
                                       -5   4   1
                                        1   4  -5

                                    diff(data, 1, 2)
                                       -7   5
                                        2   2
                                        5  -7

                                    % The command "diff(data, 2)" is the same as the command "diff(diff(data))".
                                    diff(data, 2)
                                        6   0  -6

                                e.g. Calculate the differences of some datetime values.
                                    timings = [datetime];
                                    for i = 1 : 4
                                        timings = [timings timings(1, end) + minutes(randi(5))];
                                    end

                                    disp(timings);
                                        03-Mar-2017 12:18:32   03-Mar-2017 12:19:32   03-Mar-2017 12:23:32   03-Mar-2017 12:28:32   03-Mar-2017 12:31:32

                                    diff(timings)
                                        <duration>
                                        00:01:00   00:04:00   00:05:00   00:03:00

  ----          prod            Calculate the products of array elements.

                                e.g. Calculate the products of a vector.
                                    prod([1 2 3 4])
                                        24

                                    prod([1 2 3 4]')
                                        24

                                e.g. Calculate the products of an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    prod(data)
                                       28  80 162

                                    prod(data, 1)
                                        28  80 162

                                    prod(data, 2)
                                        6
                                      120
                                      504

                                    data = randi(9, 4, 3, 2)
                                        data(:, :, 1) =
                                            7   3   8
                                            6   7   4
                                            2   3   5
                                            4   9   7

                                        data(:, :, 2) =
                                            8   5   1
                                            6   7   7
                                            6   8   4
                                            3   7   4

                                    prod(data)
                                        ans(:, :, 1) =
                                            336     567     1120

                                        ans(:, :, 2) =
                                            864     1960    112

                                    prod(data, 1)
                                        ans(:, :, 1) =
                                            336     567     1120

                                        ans(:, :, 2) =
                                            864     1960    112

                                    prod(data, 2)
                                        ans(:, :, 1) =
                                            168
                                            168
                                            30
                                            252

                                        ans(:, :, 2) =
                                            40
                                            294
                                            192
                                            84

                                    prod(data, 3)
                                           56  15   8
                                           36  49  28
                                           12  24  20
                                           12  63  28

                                e.g. Calculate the products of an array of logical values.
                                    data = [true false true; false false true; false true true]
                                        <logical>
                                        1   0   1
                                        0   0   1
                                        0   1   1

                                    prod(data)
                                        0   0   1

  ----          cumprod         Calculate the cumulative products of array elements.

                                e.g. Calculate the cumulative products of a vector.
                                    cumprod([1 2 3 4])
                                        1   2   6  24

                                    cumprod([1 2 3 4]')
                                        1
                                        2
                                        6
                                       24

                                e.g. Calculate the cumulative products of an array.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    cumprod(data)
                                        1   2   3
                                        4  10  18
                                       28  80 162

                                    cumprod(data, 1)
                                        1   2   3
                                        4  10  18
                                       28  80 162

                                    cumprod(data, 2)
                                        1   2   6
                                        4  20 120
                                        7  56 504

  ----          idivide         Perform an integer division (with rounding option) operation.

                                e.g. Divide a scalar by another scalar.
                                    idivide(int32(4), int32(2))
                                        <int32>
                                        2

                                    idivide(int32(2), int32(4))
                                        <int32>
                                        0

                                    idivide(int32(8), int32(3))
                                        <int32>
                                        2

                                    idivide(int32(8), int32(3), 'fix')
                                        <int32>
                                        2

                                    idivide(int32(8), int32(3), 'round')
                                        <int32>
                                        3

                                    idivide(int32(8), int32(3), 'floor')
                                        <int32>
                                        2

                                    idivide(int32(8), int32(3), 'ceil')
                                        <int32>
                                        3

                                e.g. Divide an array by another array.
                                    data1 = int32([2 3; 4 5])
                                        <int32>
                                        2   3
                                        4   5

                                    data2 = int32([6 7; 8 9])
                                        <int32>
                                        6   7
                                        8   9

                                    idivide(data2, data1)
                                        <int32>
                                        3   2
                                        2   1

                                    idivide(data2, data1, 'round')
                                        <int32>
                                        3   2
                                        2   2

  ----          mod             Get the remainders after performing a division operation (as a modulo operation).
                                Note: Both the functions "mod" and "rem" get the remainders of a division operation.
                                      Their differences are
                                      1. The "mod" function produces a result that either is zero or has the same sign as the divisor; and
                                         the "rem" function produces a result that either is zero or has the same sign as the dividend.
                                      2. The "mod" function follows the convention that "mod(a, 0)" returns "a"; and
                                         the "rem" function follows the convention that "mod(a, 0)" returns "NaN".

                                e.g. Get the remainders after performing a division operation on 2 scalars.
                                    mod(3, 2)
                                        1

                                    mod(4, 2)
                                        0

                                    mod(7, 4)
                                        3

                                    mod(3, -2)
                                        -1

                                    mod(-3, 2)
                                        1

                                    mod(3, 0)
                                        3

                                e.g. Get the remainders after performing a division operation on an vector and a scalar.
                                    data = 1 : 5
                                        1   2   3   4   5

                                    mod(data, 2)
                                        1   0   1   0   1

                                    mod(data', 2)
                                        1
                                        0
                                        1
                                        0
                                        1

                                e.g. Get the remainders after performing a division operation on an array and a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    mod(data, 2)
                                        1   0   1
                                        0   1   0
                                        1   0   1

                                e.g. Get the remainders after performing a division operation on 2 arrays.
                                    data1 = [5 2; 3 4]
                                        5   2
                                        3   4

                                    data2 = [4 9; 7 8]
                                        4   9
                                        7   8

                                    mod(data2, data1)
                                        4   1
                                        1   0

  ----          rem             Get the remainders after performing a division operation.

                                e.g. Get the remainders after performing a division operation on 2 scalars.
                                    rem(3, 2)
                                        1

                                    rem(4, 2)
                                        0

                                    rem(7, 4)
                                        3

                                    rem(3, -2)
                                        1

                                    rem(-3, 2)
                                        -1

                                    rem(3, 0)
                                        NaN

                                e.g. Get the remainders after performing a division operation on an vector and a scalar.
                                    data = 1 : 5
                                        1   2   3   4   5

                                    rem(data, 2)
                                        1   0   1   0   1

                                    rem(data', 2)
                                        1
                                        0
                                        1
                                        0
                                        1

                                e.g. Get the remainders after performing a division operation on an array and a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    rem(data, 2)
                                        1   0   1
                                        0   1   0
                                        1   0   1

                                e.g. Get the remainders after performing a division operation on 2 arrays.
                                    data1 = [5 2; 3 4]
                                        5   2
                                        3   4

                                    data2 = [4 9; 7 8]
                                        4   9
                                        7   8

                                    rem(data2, data1)
                                        4   1
                                        1   0

  ----          fix             Round array elements to the nearest integers toward zero, and return the result.
                                For positives, the behavior of this function is the same as the function "floor";
                                For negatives, the behavior of this function is the same as the function "ceil".

                                e.g. Round a scalar.
                                    fix(1.3)
                                        1

                                    fix(1.5)
                                        1

                                    fix(1.8)
                                        1

                                    fix(-1.3)
                                       -1

                                    fix(-1.5)
                                       -1

                                    fix(-1.8)
                                       -1

                                e.g. Round a vector.
                                    data = [1.3 1.5 1.8 -1.3 -1.5 -1.8]
                                        1.3000  1.5000  1.8000  -1.3000 -1.5000 -1.8000

                                    fix(data)
                                        1   1   1  -1  -1  -1

                                    fix(data')
                                        1
                                        1
                                        1
                                       -1
                                       -1
                                       -1

                                e.g. Round an array.
                                    data = [1.3 1.5; 1.8 -1.3; -1.5 -1.8]
                                        1.3000    1.5000
                                        1.8000   -1.3000
                                       -1.5000   -1.8000

                                    fix(data)
                                        1   1
                                        1  -1
                                       -1  -1

  ----          round           Round array elements to the nearest decimals/integers, and return the result.

                                e.g. Round a scalar.
                                    round(1.3)
                                        1

                                    round(1.5)
                                        2

                                    round(1.8)
                                        2

                                    round(-1.3)
                                       -1

                                    round(-1.5)
                                       -2

                                    round(-1.8)
                                       -2

                                e.g. Round a scalar (specifying the digits).
                                    data = 567.56789;

                                    round(data)
                                        568

                                    round(data, 1)
                                        567.6000

                                    round(data, 2)
                                        567.5700

                                    round(data, 3)
                                        567.5680

                                    round(data, 0)
                                        568

                                    round(data, -1)
                                        570

                                    round(data, -2)
                                        600

                                    data = 567;

                                    round(data, 2)
                                        567

                                e.g. Round a vector.
                                    data = [1.3 1.5 1.8 -1.3 -1.5 -1.8]
                                        1.3000  1.5000  1.8000  -1.3000 -1.5000 -1.8000

                                    round(data)
                                        1   2   2  -1  -2  -2

                                    round(data')
                                        1
                                        2
                                        2
                                       -1
                                       -2
                                       -2

                                e.g. Round an array.
                                    data = [1.3 1.5; 1.8 -1.3; -1.5 -1.8]
                                        1.3000    1.5000
                                        1.8000   -1.3000
                                       -1.5000   -1.8000

                                    round(data)
                                        1   2
                                        2  -1
                                       -2  -2

                                e.g. Round some duration values.
                                    timings = hours(8) + minutes(29:31) + seconds(1.3:0.5:2.5);
                                    timings.Format = 'hh:mm:ss.SS'
                                        <duration>
                                        08:29:01.30   08:30:01.80   08:31:02.30

                                    round(timings)
                                        <duration>
                                        08:29:01.00   08:30:02.00   08:31:02.00

                                    round(timings, 'hours')
                                        <duration>
                                        08:00:00.00   09:00:00.00   09:00:00.00

  ----          floor           Round array elements to the negative infinity, and return the result.

                                e.g. Round a scalar.
                                    floor(1.3)
                                        1

                                    floor(1.5)
                                        1

                                    floor(1.8)
                                        1

                                    floor(-1.3)
                                       -2

                                    floor(-1.5)
                                       -2

                                    floor(-1.8)
                                       -2

                                e.g. Round a vector.
                                    data = [1.3 1.5 1.8 -1.3 -1.5 -1.8]
                                        1.3000  1.5000  1.8000  -1.3000 -1.5000 -1.8000

                                    floor(data)
                                        1   1   1  -2  -2  -2

                                    floor(data')
                                        1
                                        1
                                        1
                                       -2
                                       -2
                                       -2

                                e.g. Round an array.
                                    data = [1.3 1.5; 1.8 -1.3; -1.5 -1.8]
                                        1.3000    1.5000
                                        1.8000   -1.3000
                                       -1.5000   -1.8000

                                    floor(data)
                                        1   1
                                        1  -2
                                       -2  -2

                                e.g. Round some duration values.
                                    timings = hours(8) + minutes(29:31) + seconds(1.3:0.5:2.5);
                                    timings.Format = 'hh:mm:ss.SS'
                                        <duration>
                                        08:29:01.30   08:30:01.80   08:31:02.30

                                    floor(timings)
                                        <duration>
                                        08:29:01.00   08:30:01.00   08:31:02.00

                                    floor(timings, 'hours')
                                        <duration>
                                        08:00:00.00   08:00:00.00   08:00:00.00

  ----          ceil            Round array elements to the positive infinity, and return the result.

                                e.g. Round a scalar.
                                    ceil(1.3)
                                        2

                                    ceil(1.5)
                                        2

                                    ceil(1.8)
                                        2

                                    ceil(-1.3)
                                       -1

                                    ceil(-1.5)
                                       -1

                                    ceil(-1.8)
                                       -1

                                e.g. Round a vector.
                                    data = [1.3 1.5 1.8 -1.3 -1.5 -1.8]
                                        1.3000  1.5000  1.8000  -1.3000 -1.5000 -1.8000

                                    ceil(data)
                                        2   2   2  -1  -1  -1

                                    ceil(data')
                                        2
                                        2
                                        2
                                       -1
                                       -1
                                       -1

                                e.g. Round an array.
                                    data = [1.3 1.5; 1.8 -1.3; -1.5 -1.8]
                                        1.3000    1.5000
                                        1.8000   -1.3000
                                       -1.5000   -1.8000

                                    ceil(data)
                                        2   2
                                        2  -1
                                       -1  -1

                                e.g. Round some duration values.
                                    timings = hours(8) + minutes(29:31) + seconds(1.3:0.5:2.5);
                                    timings.Format = 'hh:mm:ss.SS'
                                        <duration>
                                        08:29:01.30   08:30:01.80   08:31:02.30

                                    ceil(timings)
                                        <duration>
                                        08:29:02.00   08:30:02.00   08:31:03.00

                                    ceil(timings, 'hours')
                                        <duration>
                                        09:00:00.00   09:00:00.00   09:00:00.00

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Relational Operators/Operations (Various Value Comparisons)

  == eq       | ~= ne      | < lt       | <= le      | > gt       | >= ge      |                                (6)
  isequal     | isequaln   |                                                                                    (2)
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  Operator      Function        Description
  ------------------------------------------------------------------------------------------------------------------------
  ==            eq              Compare array elements to see whether some ones are equal to the other ones, and return the result.

                                e.g. Compare a scalar with another scalar.
                                    1 == 1
                                        <logical>
                                        1

                                    1 == 2
                                        <logical>
                                        0

                                    'a' == 'a'
                                        <logical>
                                        1

                                    'a' == 'b'
                                        <logical>
                                        0

                                    true == true
                                        <logical>
                                        1

                                    true == false
                                        <logical>
                                        0

                                    'a' == 1
                                        <logical>
                                        0

                                    'a' == 97
                                        <logical>
                                        1

                                    true == 0
                                        <logical>
                                        0

                                    true == 1
                                        <logical>
                                        1

                                    1 == NaN
                                        <logical>
                                        0

                                e.g. Compare a vector and a scalar.
                                    [2 5 4] == 5
                                        <logical>
                                        0   1   0

                                    [2 5 4]' == 5
                                        <logical>
                                        0
                                        1
                                        0

                                e.g. Compare a vector and another vector.
                                    [2 5 4] == [1 5 3]
                                        <logical>
                                        0   1   0

                                    [2 5 4]' == [1 5 3]'
                                        <logical>
                                        0
                                        1
                                        0

                                e.g. Compare an array with a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data == 5
                                        <logical>
                                        0   0   0
                                        0   1   0
                                        0   0   0

                                e.g. Compare an array with a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data == [4 2 9]
                                        <logical>
                                        0   1   0
                                        1   0   0
                                        0   0   1

                                    data == [4 2 9]'
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        0   0   1

                                e.g. Compare an array with another array.
                                    data1 = [5 4 8; 9 7 2; 1 6 3]
                                        5   4   8
                                        9   7   2
                                        1   6   3

                                    data2 = [2 4 7; 9 5 6; 8 1 3]
                                        2   4   7
                                        9   5   6
                                        8   1   3

                                    data1 == data2
                                        <logical>
                                        0   1   0
                                        1   0   0
                                        0   0   1

                                    data3 = [5 4 8; 9 NaN 2; 1 6 3]
                                        5   4   8
                                        9  NaN  2
                                        1   6   3

                                    data1 == data3
                                        <logical>
                                        1   1   1
                                        1   0   1
                                        1   1   1

                                e.g. Find characters.
                                    data = 'Hello, World!';
                                    % Each occurrence of 1 in the result means a character found.
                                    % If there is no occurrences of 1 (i.e. all elements in the result are 0), it means the target does not contain the specified character.
                                    data == 'o'
                                        <logical>
                                        0   0   0   0   1   0   0   0   1   0   0   0   0

                                e.g. Compare using the function.
                                    eq(2, 2)
                                        <logical>
                                        1

                                    eq(2, 3)
                                        <logical>
                                        0

  ~=            ne              Compare array elements to see whether some ones are not equal to the other ones, and return the result.

                                e.g. Compare a scalar with another scalar.
                                    1 ~= 1
                                        <logical>
                                        0

                                    1 ~= 2
                                        <logical>
                                        1

                                    'a' ~= 'a'
                                        <logical>
                                        0

                                    'a' ~= 'b'
                                        <logical>
                                        1

                                    true ~= true
                                        <logical>
                                        0

                                    true ~= false
                                        <logical>
                                        1

                                    'a' ~= 1
                                        <logical>
                                        1

                                    'a' ~= 97
                                        <logical>
                                        0

                                    true ~= 0
                                        <logical>
                                        1

                                    true ~= 1
                                        <logical>
                                        0

                                    1 ~= NaN
                                        <logical>
                                        1

                                e.g. Compare a vector and a scalar.
                                    [2 5 4] ~= 5
                                        <logical>
                                        1   0   1

                                    [2 5 4]' ~= 5
                                        <logical>
                                        1
                                        0
                                        1

                                e.g. Compare a vector and another vector.
                                    [2 5 4] ~= [1 5 3]
                                        <logical>
                                        1   0   1

                                    [2 5 4]' ~= [1 5 3]'
                                        <logical>
                                        1
                                        0
                                        1

                                e.g. Compare an array with a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data ~= 5
                                        <logical>
                                        1   1   1
                                        1   0   1
                                        1   1   1

                                e.g. Compare an array with a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data ~= [4 2 9]
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    data ~= [4 2 9]'
                                        <logical>
                                        1   1   1
                                        1   1   1
                                        1   1   0

                                e.g. Compare an array with another array.
                                    data1 = [5 4 8; 9 7 2; 1 6 3]
                                        5   4   8
                                        9   7   2
                                        1   6   3

                                    data2 = [2 4 7; 9 5 6; 8 1 3]
                                        2   4   7
                                        9   5   6
                                        8   1   3

                                    data1 ~= data2
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    data3 = [5 4 8; 9 NaN 2; 1 6 3]
                                        5   4   8
                                        9  NaN  2
                                        1   6   3

                                    data1 ~= data3
                                        <logical>
                                        0   0   0
                                        0   1   0
                                        0   0   0

                                e.g. Find characters.
                                    data = 'Hello, World!';
                                    % Each occurrence of 0 in the result means a character found.
                                    % If there is no occurrences of 0 (i.e. all elements in the result are 1), it means the target does not contain the specified character.
                                    data ~= 'o'
                                        <logical>
                                        1   1   1   1   0   1   1   1   0   1   1   1   1

                                e.g. Compare using the function.
                                    ne(2, 2)
                                        <logical>
                                        0

                                    ne(2, 3)
                                        <logical>
                                        1

  <             lt              Compare array elements to see whether some ones are less than the other ones, and return the result.
                                Note: The comparison is only for numbers. This function returns logical 0 (false), if either of operands is NaN or undefined categorical elements.

                                e.g. Compare a scalar with another scalar.
                                    2 < 1
                                        <logical>
                                        0

                                    2 < 2
                                        <logical>
                                        0

                                    2 < 3
                                        <logical>
                                        1

                                    'b' < 'a'
                                        <logical>
                                        0

                                    'b' < 'b'
                                        <logical>
                                        0

                                    'b' < 'c'
                                        <logical>
                                        1

                                    true < false
                                        <logical>
                                        0

                                    true < true
                                        <logical>
                                        0

                                    false < true
                                        <logical>
                                        1

                                    'a' < 96
                                        <logical>
                                        0

                                    'a' < 97
                                        <logical>
                                        0

                                    'a' < 98
                                        <logical>
                                        1

                                    true < 0
                                        <logical>
                                        0

                                    true < 1
                                        <logical>
                                        0

                                    true < 2
                                        <logical>
                                        1

                                    1 < NaN
                                        <logical>
                                        0

                                    NaN < 1
                                        <logical>
                                        0

                                e.g. Compare a vector and a scalar.
                                    [1 2 3] < 2
                                        <logical>
                                        1   0   0

                                    [1 2 3]' < 2
                                        <logical>
                                        1
                                        0
                                        0

                                e.g. Compare a vector and another vector.
                                    [1 2 3] < [2 2 2]
                                        <logical>
                                        1   0   0

                                    [1 2 3]' < [2 2 2]'
                                        <logical>
                                        1
                                        0
                                        0

                                e.g. Compare an array with a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data < 5
                                        <logical>
                                        1   1   1
                                        1   0   0
                                        0   0   0

                                e.g. Compare an array with a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data < [4 5 6]
                                        <logical>
                                        1   1   1
                                        0   0   0
                                        0   0   0

                                    data < [4 5 6]'
                                        <logical>
                                        1   1   1
                                        1   0   0
                                        0   0   0

                                e.g. Compare an array with another array.
                                    data1 = [5 4 8; 9 7 2; 1 6 3]
                                        5   4   8
                                        9   7   2
                                        1   6   3

                                    data2 = [2 4 7; 9 5 6; 8 1 3]
                                        2   4   7
                                        9   5   6
                                        8   1   3

                                    data1 < data2
                                        <logical>
                                        0   0   0
                                        0   0   1
                                        1   0   0

                                    data3 = [5 4 8; 9 NaN 2; 1 6 3]
                                        5   4   8
                                        9  NaN  2
                                        1   6   3

                                    data1 < data3
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        0   0   0

                                    data3 < data1
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        0   0   0

                                e.g. Compare a datetime with another datetime.
                                    dataTime1 = datetime()
                                        <datetime>
                                        06-Mar-2017 12:31:11

                                    dataTime2 = datetime('1977/05/18 12:34:56', 'InputFormat', 'yyyy/MM/dd HH:mm:ss')
                                        <datetime>
                                        18-May-1977 12:34:56

                                    dataTime1 < dataTime2
                                        <logical>
                                        0

                                e.g. Find and replace some array elements by comparison.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data(data < 5)
                                        1
                                        4
                                        2
                                        3

                                    data(data < 5) = 0
                                        0   0   0
                                        0   5   6
                                        7   8   9

                                e.g. Compare duration values.
                                    timings = sort([hours(21:25) + minutes(75), hours(23:25)])
                                        <duration>
                                            22.25 hr    23 hr   23.25 hr    24 hr   24.25 hr    25 hr   25.25 hr    26.25 hr

                                    timings < 1
                                        <logical>
                                            1   1   1   0   0   0   0   0

                                e.g. Compare using the function.
                                    lt(2, 1)
                                        <logical>
                                        0

                                    lt(2, 2)
                                        <logical>
                                        0

                                    lt(2, 3)
                                        <logical>
                                        1

  <=            le              Compare array elements to see whether some ones are less than or equal to the other ones, and return the result.
                                Note: The comparison is only for numbers. This function returns logical 0 (false), if either of operands is NaN or undefined categorical elements.

                                e.g. Compare a scalar with another scalar.
                                    2 <= 1
                                        <logical>
                                        0

                                    2 <= 2
                                        <logical>
                                        1

                                    2 <= 3
                                        <logical>
                                        1

                                    'b' <= 'a'
                                        <logical>
                                        0

                                    'b' <= 'b'
                                        <logical>
                                        1

                                    'b' <= 'c'
                                        <logical>
                                        1

                                    true <= false
                                        <logical>
                                        0

                                    true <= true
                                        <logical>
                                        1

                                    false <= true
                                        <logical>
                                        1

                                    'a' <= 96
                                        <logical>
                                        0

                                    'a' <= 97
                                        <logical>
                                        1

                                    'a' <= 98
                                        <logical>
                                        1

                                    true <= 0
                                        <logical>
                                        0

                                    true <= 1
                                        <logical>
                                        1

                                    true <= 2
                                        <logical>
                                        1

                                    1 <= NaN
                                        <logical>
                                        0

                                    NaN <= 1
                                        <logical>
                                        0

                                e.g. Compare a vector and a scalar.
                                    [1 2 3] <= 2
                                        <logical>
                                        1   1   0

                                    [1 2 3]' <= 2
                                        <logical>
                                        1
                                        1
                                        0

                                e.g. Compare a vector and another vector.
                                    [1 2 3] <= [2 2 2]
                                        <logical>
                                        1   1   0

                                    [1 2 3]' <= [2 2 2]'
                                        <logical>
                                        1
                                        1
                                        0

                                e.g. Compare an array with a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data <= 5
                                        <logical>
                                        1   1   1
                                        1   1   0
                                        0   0   0

                                e.g. Compare an array with a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data <= [4 5 6]
                                        <logical>
                                        1   1   1
                                        1   1   1
                                        0   0   0

                                    data <= [4 5 6]'
                                        <logical>
                                        1   1   1
                                        1   1   0
                                        0   0   0

                                e.g. Compare an array with another array.
                                    data1 = [5 4 8; 9 7 2; 1 6 3]
                                        5   4   8
                                        9   7   2
                                        1   6   3

                                    data2 = [2 4 7; 9 5 6; 8 1 3]
                                        2   4   7
                                        9   5   6
                                        8   1   3

                                    data1 <= data2
                                        <logical>
                                        0   1   0
                                        1   0   1
                                        1   0   1

                                    data3 = [5 4 8; 9 NaN 2; 1 6 3]
                                        5   4   8
                                        9  NaN  2
                                        1   6   3

                                    data1 <= data3
                                        <logical>
                                        1   1   1
                                        1   0   1
                                        1   1   1

                                    data3 <= data1
                                        <logical>
                                        1   1   1
                                        1   0   1
                                        1   1   1

                                e.g. Compare a datetime with another datetime.
                                    dataTime1 = datetime()
                                        <datetime>
                                        06-Mar-2017 12:31:11

                                    dataTime2 = datetime('1977/05/18 12:34:56', 'InputFormat', 'yyyy/MM/dd HH:mm:ss')
                                        <datetime>
                                        18-May-1977 12:34:56

                                    dataTime1 <= dataTime2
                                        <logical>
                                        0

                                e.g. Find and replace some array elements by comparison.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data(data <= 5)
                                        1
                                        4
                                        2
                                        5
                                        3

                                    data(data <= 5) = 0
                                        0   0   0
                                        0   0   6
                                        7   8   9

                                e.g. Compare duration values.
                                    timings = sort([hours(21:25) + minutes(75), hours(23:25)])
                                        <duration>
                                            22.25 hr    23 hr   23.25 hr    24 hr   24.25 hr    25 hr   25.25 hr    26.25 hr

                                    timings <= 1
                                        <logical>
                                            1   1   1   1   0   0   0   0

                                e.g. Compare using the function.
                                    le(2, 1)
                                        <logical>
                                        0

                                    le(2, 2)
                                        <logical>
                                        1

                                    le(2, 3)
                                        <logical>
                                        1

  >             gt              Compare array elements to see whether some ones are greater than the other ones, and return the result.
                                Note: The comparison is only for numbers. This function returns logical 0 (false), if either of operands is NaN or undefined categorical elements.

                                e.g. Compare a scalar with another scalar.
                                    2 > 1
                                        <logical>
                                        1

                                    2 > 2
                                        <logical>
                                        0

                                    2 > 3
                                        <logical>
                                        0

                                    'b' > 'a'
                                        <logical>
                                        1

                                    'b' > 'b'
                                        <logical>
                                        0

                                    'b' > 'c'
                                        <logical>
                                        0

                                    true > false
                                        <logical>
                                        1

                                    true > true
                                        <logical>
                                        0

                                    false > true
                                        <logical>
                                        0

                                    'a' > 96
                                        <logical>
                                        1

                                    'a' > 97
                                        <logical>
                                        0

                                    'a' > 98
                                        <logical>
                                        0

                                    true > 0
                                        <logical>
                                        1

                                    true > 1
                                        <logical>
                                        0

                                    true > 2
                                        <logical>
                                        0

                                    1 > NaN
                                        <logical>
                                        0

                                    NaN > 1
                                        <logical>
                                        0

                                e.g. Compare a vector and a scalar.
                                    [1 2 3] > 2
                                        <logical>
                                        0   0   1

                                    [1 2 3]' > 2
                                        <logical>
                                        0
                                        0
                                        1

                                e.g. Compare a vector and another vector.
                                    [1 2 3] > [2 2 2]
                                        <logical>
                                        0   0   1

                                    [1 2 3]' > [2 2 2]'
                                        <logical>
                                        0
                                        0
                                        1

                                e.g. Compare an array with a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data > 5
                                        <logical>
                                        0   0   0
                                        0   0   1
                                        1   1   1

                                e.g. Compare an array with a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data > [4 5 6]
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        1   1   1

                                    data > [4 5 6]'
                                        <logical>
                                        0   0   0
                                        0   0   1
                                        1   1   1

                                e.g. Compare an array with another array.
                                    data1 = [5 4 8; 9 7 2; 1 6 3]
                                        5   4   8
                                        9   7   2
                                        1   6   3

                                    data2 = [2 4 7; 9 5 6; 8 1 3]
                                        2   4   7
                                        9   5   6
                                        8   1   3

                                    data1 > data2
                                        <logical>
                                        1   0   1
                                        0   1   0
                                        0   1   0

                                    data3 = [5 4 8; 9 NaN 2; 1 6 3]
                                        5   4   8
                                        9  NaN  2
                                        1   6   3

                                    data1 > data3
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        0   0   0

                                    data3 > data1
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        0   0   0

                                e.g. Compare a datetime with another datetime.
                                    dataTime1 = datetime()
                                        <datetime>
                                        06-Mar-2017 12:31:11

                                    dataTime2 = datetime('1977/05/18 12:34:56', 'InputFormat', 'yyyy/MM/dd HH:mm:ss')
                                        <datetime>
                                        18-May-1977 12:34:56

                                    dataTime1 > dataTime2
                                        <logical>
                                        1

                                e.g. Find and replace some array elements by comparison.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data(data > 5)
                                        7
                                        8
                                        6
                                        9

                                    data(data > 5) = 0
                                        1   2   3
                                        4   5   0
                                        0   0   0

                                e.g. Compare duration values.
                                    timings = sort([hours(21:25) + minutes(75), hours(23:25)])
                                        <duration>
                                            22.25 hr    23 hr   23.25 hr    24 hr   24.25 hr    25 hr   25.25 hr    26.25 hr

                                    timings > 1
                                        <logical>
                                            0   0   0   0   1   1   1   1

                                e.g. Compare using the function.
                                    gt(2, 1)
                                        <logical>
                                        1

                                    gt(2, 2)
                                        <logical>
                                        0

                                    gt(2, 3)
                                        <logical>
                                        0

  >=            ge              Compare array elements to see whether some ones are greater than or equal to the other ones, and return the result.
                                Note: The comparison is only for numbers. This function returns logical 0 (false), if either of operands is NaN or undefined categorical elements.

                                e.g. Compare a scalar with another scalar.
                                    2 >= 1
                                        <logical>
                                        1

                                    2 >= 2
                                        <logical>
                                        1

                                    2 >= 3
                                        <logical>
                                        0

                                    'b' >= 'a'
                                        <logical>
                                        1

                                    'b' >= 'b'
                                        <logical>
                                        1

                                    'b' >= 'c'
                                        <logical>
                                        0

                                    true >= false
                                        <logical>
                                        1

                                    true >= true
                                        <logical>
                                        1

                                    false >= true
                                        <logical>
                                        0

                                    'a' >= 96
                                        <logical>
                                        1

                                    'a' >= 97
                                        <logical>
                                        1

                                    'a' >= 98
                                        <logical>
                                        0

                                    true >= 0
                                        <logical>
                                        1

                                    true >= 1
                                        <logical>
                                        1

                                    true >= 2
                                        <logical>
                                        0

                                    1 >= NaN
                                        <logical>
                                        0

                                    NaN >= 1
                                        <logical>
                                        0

                                e.g. Compare a vector and a scalar.
                                    [1 2 3] >= 2
                                        <logical>
                                        0   1   1

                                    [1 2 3]' >= 2
                                        <logical>
                                        0
                                        1
                                        1

                                e.g. Compare a vector and another vector.
                                    [1 2 3] >= [2 2 2]
                                        <logical>
                                        0   1   1

                                    [1 2 3]' >= [2 2 2]'
                                        <logical>
                                        0
                                        1
                                        1

                                e.g. Compare an array with a scalar.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data >= 5
                                        <logical>
                                        0   0   0
                                        0   1   1
                                        1   1   1

                                e.g. Compare an array with a vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data >= [4 5 6]
                                        <logical>
                                        0   0   0
                                        1   1   1
                                        1   1   1

                                    data >= [4 5 6]'
                                        <logical>
                                        0   0   0
                                        0   1   1
                                        1   1   1

                                e.g. Compare an array with another array.
                                    data1 = [5 4 8; 9 7 2; 1 6 3]
                                        5   4   8
                                        9   7   2
                                        1   6   3

                                    data2 = [2 4 7; 9 5 6; 8 1 3]
                                        2   4   7
                                        9   5   6
                                        8   1   3

                                    data1 >= data2
                                        <logical>
                                        1   1   1
                                        1   1   0
                                        0   1   1

                                    data3 = [5 4 8; 9 NaN 2; 1 6 3]
                                        5   4   8
                                        9  NaN  2
                                        1   6   3

                                    data1 >= data3
                                        <logical>
                                        1   1   1
                                        1   0   1
                                        1   1   1

                                    data3 >= data1
                                        <logical>
                                        1   1   1
                                        1   0   1
                                        1   1   1

                                e.g. Compare a datetime with another datetime.
                                    dataTime1 = datetime()
                                        <datetime>
                                        06-Mar-2017 12:31:11

                                    dataTime2 = datetime('1977/05/18 12:34:56', 'InputFormat', 'yyyy/MM/dd HH:mm:ss')
                                        <datetime>
                                        18-May-1977 12:34:56

                                    dataTime1 >= dataTime2
                                        <logical>
                                        1

                                e.g. Find and replace some array elements by comparison.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    data(data >= 5)
                                        7
                                        5
                                        8
                                        6
                                        9

                                    data(data >= 5) = 0
                                        1   2   3
                                        4   0   0
                                        0   0   0

                                e.g. Compare duration values.
                                    timings = sort([hours(21:25) + minutes(75), hours(23:25)])
                                        <duration>=
                                            22.25 hr    23 hr   23.25 hr    24 hr   24.25 hr    25 hr   25.25 hr    26.25 hr

                                    timings >= 1
                                        <logical>
                                            0   0   0   1   1   1   1   1

                                e.g. Compare using the function.
                                    ge(2, 1)
                                        <logical>
                                        1

                                    ge(2, 2)
                                        <logical>
                                        1

                                    ge(2, 3)
                                        <logical>
                                        0

  ----          isequal         Compare arrays and return whether they are equal.
                                This function returns logical 1 (true) if its arguments are all the same size and their contents are all same; otherwise, it returns logical 0 (false).
                                Note: This function does not consider the data type when testing the equality.

                                e.g. Compare a scalar with another scalar.
                                    isequal(1, 1)
                                        <logical>
                                        1

                                    isequal(1, 2)
                                        <logical>
                                        0

                                    isequal(1, 1, 1)
                                        <logical>
                                        1

                                    isequal(1, 1, 2)
                                        <logical>
                                        0

                                    isequal('a', 'a')
                                        <logical>
                                        1

                                    isequal('a', 'b')
                                        <logical>
                                        0

                                    isequal(true, true)
                                        <logical>
                                        1

                                    isequal(true, false)
                                        <logical>
                                        0

                                    isequal('a', 96)
                                        <logical>
                                        0

                                    isequal(datetime(), datetime('1977/05/18 12:34:56', 'InputFormat', 'yyyy/MM/dd HH:mm:ss'))
                                        <logical>
                                        0

                                    isequal(datetime('18-May-1977 12:34:56'), datetime('1977/05/18 12:34:56', 'InputFormat', 'yyyy/MM/dd HH:mm:ss'))
                                        <logical>
                                        1

                                    isequal(hours(1), minutes(60), seconds(3600))
                                        <logical>
                                        1

                                    isequal('a', 97)
                                        <logical>
                                        1

                                    isequal(true, 0)
                                        <logical>
                                        0

                                    isequal(true, 1)
                                        <logical>
                                        1

                                    isequal(1, NaN)
                                        <logical>
                                        0

                                e.g. Compare a vector and another vector.
                                    data = [1 2 3; 4 5 6; 7 8 9]
                                        1   2   3
                                        4   5   6
                                        7   8   9

                                    isequal(data(2, :), [4 5 6])
                                        <logical>
                                        1

                                    isequal(data(:, 2), [2 5 9]')
                                        <logical>
                                        0

                                e.g. Compare an array with another array.
                                    data1 = ones(3)
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                    isequal(data1, ones(3))
                                        <logical>
                                        1

                                    isequal(data1, ones(2))
                                        <logical>
                                        0

                                    data2 = [1.1 1.2 1.3; 1.4 1.5 1.6; 1.7 1.8 1.9]
                                        1.1000  1.2000  1.3000
                                        1.4000  1.5000  1.6000
                                        1.7000  1.8000  1.9000

                                    isequal(data1, floor(data2))
                                        <logical>
                                        1

                                    isequal(data1, ceil(data2))
                                        <logical>
                                        0

                                    data3 = true(3)
                                        <logical>
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                    isequal(data1, data3)
                                        <logical>
                                        1

                                    data3(2, 2) = false
                                        <logical>
                                        1   1   1
                                        1   0   1
                                        1   1   1

                                    isequal(data1, data3)
                                        <logical>
                                        0

                                    isequal(data1, ones(3), true(3))
                                        <logical>
                                        1

                                    data4 = ones(3)
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                    data4(2, 2) = NaN

                                    isequal(data1, data4)
                                        <logical>
                                        0

                                    isequal(data4, data4)
                                        <logical>
                                        0

                                e.g. Compare a structure with another structure.
                                    data1 = struct('field1', 0.005, 'field2', 2500)
                                        <struct>
                                        field1: 0.0050
                                        field2: 2500

                                    data2 = struct('field2', 2500, 'field1', 0.005)
                                        <struct>
                                        field2: 2500
                                        field1: 0.0050

                                    isequal(data1, data2)
                                        <logical>
                                        1

  ----          isequaln        Compare arrays and return whether they are equal (treating NaN values as equal).
                                This function returns logical 1 (true) if its arguments are all the same size and their contents are all same; otherwise, it returns logical 0 (false).
                                Note: This function does not consider the data type when testing the equality.
                                Note: For examples not involving NaN values, refer to the function "isequal".

                                e.g. Compare a scalar with another scalar.
                                    isequaln(1, NaN)
                                        <logical>
                                        0

                                e.g. Compare an array with another array.
                                    data1 = ones(3)
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                    data2 = ones(3)
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                    data2(2, 2) = NaN

                                    isequaln(data1, data2)
                                        <logical>
                                        0

                                    isequaln(data2, data2)
                                        <logical>
                                        1

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Logical Operators/Operations (Processing Boolean Conditions)

  ~ not       | & and      | | or       | xor        | && and (SC)| || or (SC) |                                (6)
  true        | false      | any        | all        | find       | islogical  | logical    |                   (7)
  Note: SC here means the operator employs the short-circuiting behavior.
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  Operator      Function        Description
  ------------------------------------------------------------------------------------------------------------------------
  ~             not             Perform a logic NOT operation.
                                This function returns logical 1 (true) if the array element is zero and logical 0 (false) where the array element is nonzero.

                                e.g. Peform the operation on a scalar.
                                    ~1
                                        <logical>
                                        0

                                    ~0
                                        <logical>
                                        1

                                    ~2
                                        <logical>
                                        0

                                    ~true
                                        <logical>
                                        0

                                    ~false
                                        <logical>
                                        1

                                e.g. Peform the operation on a vector.
                                    ~[-2 -1 0 1 2]
                                        <logical>
                                        0   0   1   0   0

                                    ~([-2 -1 0 1 2]')
                                        <logical>
                                        0
                                        0
                                        1
                                        0
                                        0

                                e.g. Peform the operation on an array.
                                    ~zeros(3)
                                        <logical>
                                            1   1   1
                                            1   1   1
                                            1   1   1

                                    ~ones(3)
                                        <logical>
                                            0   0   0
                                            0   0   0
                                            0   0   0

                                    data = [2 0 3; 1 5 0; 4 9 7]
                                        2   0   3
                                        1   5   0
                                        4   9   7

                                    ~data
                                        0   1   0
                                        0   0   1
                                        0   0   0


                                e.g. Use in the code block.
                                    someVariable = false;

                                    for counter = 1 : 3
                                        if ~someVariable
                                            disp('Doing something #1...');
                                        else
                                            disp('Doing something #2...');
                                        end
                                        someVariable = ~someVariable;
                                    end

                                    ------------------------
                                    Doing something #1...
                                    Doing something #2...
                                    Doing something #1...
                                    ------------------------

                                e.g. Peform the operation using the function.
                                    not(0)
                                        <logical>
                                        1

                                    not(true)
                                        <logical>
                                        0

  &             and             Perform a logic AND operation.
                                This function returns logical 1 (true) if both the corresponding 2 array elements are nonzero.

                                e.g. Peform the operation on scalars.
                                    0 & 0
                                        <logical>
                                        0

                                    1 & 0
                                        <logical>
                                        0

                                    1 & 1
                                        <logical>
                                        1

                                    2 & 0
                                        <logical>
                                        0

                                    2 & 1
                                        <logical>
                                        1

                                    true & false
                                        <logical>
                                        0

                                    true & true
                                        <logical>
                                        1

                                e.g. Peform the operation on vectors and scalars.
                                    [0 1 2] & 0
                                        <logical>
                                        0   0   0

                                    [0 1 2] & 1
                                        <logical>
                                        0   1   1

                                    [0 1 2] & 2
                                        <logical>
                                        0   1   1

                                    [0 1 2]' & 0
                                        <logical>
                                        0
                                        0
                                        0

                                e.g. Peform the operation on vectors.
                                    [0 1 2 3] & [3 2 1 0]
                                        <logical>
                                        0   1   1   0

                                    [0 1 2 3]' & [3 2 1 0]'
                                        <logical>
                                        0
                                        1
                                        1
                                        0

                                e.g. Peform the operation on arrays and scalars.
                                    data = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    data & 0
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        0   0   0

                                    data & 1
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    data & 2
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                e.g. Peform the operation on arrays and vectors.
                                    data = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    data & [1 0 1]
                                        <logical>
                                        1   0   1
                                        0   0   1
                                        1   0   0

                                    data & [1 0 1]'
                                        <logical>
                                        1   0   1
                                        0   0   0
                                        1   1   0

                                    data & [2 false 5]
                                        <logical>
                                        1   0   1
                                        0   0   1
                                        1   0   0

                                e.g. Peform the operation on arrays.
                                    data1 = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    data1 & zeros(3)
                                        <logical>
                                        0   0   0
                                        0   0   0
                                        0   0   0

                                    data1 & ones(3)
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    data2 = [9 1 8; 0 3 4; 7 0 6]
                                        9   1   8
                                        0   3   4
                                        7   0   6

                                    data1 & data2
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   0   0

                                e.g. Peform the operation using the function.
                                    and(1, 0)
                                        <logical>
                                        0

                                    and(1, 1)
                                        <logical>
                                        1

  |             or              Perform a logic OR operation.
                                This function returns logical 1 (true) if either of the corresponding 2 array elements is nonzero.

                                e.g. Peform the operation on scalars.
                                    0 | 0
                                        <logical>
                                        0

                                    1 | 0
                                        <logical>
                                        1

                                    1 | 1
                                        <logical>
                                        1

                                    2 | 0
                                        <logical>
                                        1

                                    2 | 1
                                        <logical>
                                        1

                                    true | false
                                        <logical>
                                        1

                                    true | true
                                        <logical>
                                        1

                                e.g. Peform the operation on vectors and scalars.
                                    [0 1 2] | 0
                                        <logical>
                                        0   1   1

                                    [0 1 2] | 1
                                        <logical>
                                        1   1   1

                                    [0 1 2] | 2
                                        <logical>
                                        1   1   1

                                    [0 1 2]' | 0
                                        <logical>
                                        0
                                        1
                                        1

                                e.g. Peform the operation on vectors.
                                    [0 1 2 3] | [3 2 1 0]
                                        <logical>
                                        1   1   1   1

                                    [0 1 2 3]' | [3 2 1 0]'
                                        <logical>
                                        1
                                        1
                                        1
                                        1

                                e.g. Peform the operation on arrays and scalars.
                                    data = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    data | 0
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    data | 1
                                        <logical>
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                    data | 2
                                        <logical>
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                e.g. Peform the operation on arrays and vectors.
                                    data = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    data | [1 0 1]
                                        <logical>
                                        1   0   1
                                        1   1   1
                                        1   1   1

                                    data | [1 0 1]'
                                        <logical>
                                        1   1   1
                                        0   1   1
                                        1   1   1

                                    data | [2 false 5]
                                        <logical>
                                        1   0   1
                                        1   1   1
                                        1   1   1

                                e.g. Peform the operation on arrays.
                                    data1 = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    data1 | zeros(3)
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    data1 | ones(3)
                                        <logical>
                                        1   1   1
                                        1   1   1
                                        1   1   1

                                    data2 = [9 1 8; 0 3 4; 7 0 6]
                                        9   1   8
                                        0   3   4
                                        7   0   6

                                    data1 | data2
                                        <logical>
                                        1   1   1
                                        0   1   1
                                        1   1   1

                                e.g. Peform the operation using the function.
                                    or(1, 0)
                                        <logical>
                                        0

                                    or(1, 1)
                                        <logical>
                                        1

  ----          xor             Perform a logic exclusive OR operation.
                                This function returns logical 1 (true) if only one of the corresponding 2 array elements is nonzero.

                                e.g. Peform the operation on scalars.
                                    xor(0, 0)
                                        <logical>
                                        0

                                    xor(1, 0)
                                        <logical>
                                        1

                                    xor(1, 1)
                                        <logical>
                                        0

                                    xor(2, 0)
                                        <logical>
                                        1

                                    xor(2, 1)
                                        <logical>
                                        0

                                    xor(true, false)
                                        <logical>
                                        1

                                    xor(true, true)
                                        <logical>
                                        0

                                e.g. Peform the operation on vectors and scalars.
                                    xor([0 1 2], 0)
                                        <logical>
                                        0   1   1

                                    xor([0 1 2], 1)
                                        <logical>
                                        1   0   0

                                    xor([0 1 2], 2)
                                        <logical>
                                        1   0   0

                                    xor([0 1 2]', 0)
                                        <logical>
                                        0
                                        1
                                        1

                                e.g. Peform the operation on vectors.
                                    xor([0 1 2 3], [3 2 1 0])
                                        <logical>
                                        1   0   0   1

                                    xor([0 1 2 3]', [3 2 1 0]')
                                        <logical>
                                        1
                                        0
                                        0
                                        1

                                e.g. Peform the operation on arrays and scalars.
                                    data = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    xor(data, 0)
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    xor(data, 1)
                                        <logical>
                                        0   1   0
                                        1   0   0
                                        0   0   1

                                    xor(data, 2)
                                        <logical>
                                        0   1   0
                                        1   0   0
                                        0   0   1

                                e.g. Peform the operation on arrays and vectors.
                                    data = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    xor(data, [1 0 1])
                                        <logical>
                                        0   0   0
                                        1   1   0
                                        0   1   1

                                    xor(data, [1 0 1]')
                                        <logical>
                                        0   1   0
                                        0   1   1
                                        0   0   1

                                    xor(data, [2 false 5])
                                        <logical>
                                        0   0   0
                                        1   1   0
                                        0   1   1

                                e.g. Peform the operation on arrays.
                                    data1 = [5 0 4; 0 8 3; 2 7 0]
                                        5   0   4
                                        0   8   3
                                        2   7   0

                                    xor(data1, zeros(3))
                                        <logical>
                                        1   0   1
                                        0   1   1
                                        1   1   0

                                    xor(data1, ones(3))
                                        <logical>
                                        0   1   0
                                        1   0   0
                                        0   0   1

                                    data2 = [9 1 8; 0 3 4; 7 0 6]
                                        9   1   8
                                        0   3   4
                                        7   0   6

                                    xor(data1, data2)
                                        <logical>
                                        0   1   0
                                        0   0   0
                                        0   1   1

  &&            and (SC)        Perform a logic AND operation (employing the short-circuiting behavior).
                                Note: For examples, refer to the operator "& (and)".

  ||            or (SC)         Perform a logic OR operation (employing the short-circuiting behavior).
                                Note: For examples, refer to the function "| (or)".

  ----          true            Return an array which all elements are logical 1 (true).
                                <For the content, see Function List - Matrices and Arrays - Create and Combine Arrays - true>

  ----          false           Return an array which all elements are logical 0 (false).
                                <For the content, see Function List - Matrices and Arrays - Create and Combine Arrays - false>

  ----          any             Determine if any array elements are nonzero.
                                Note: The empty strings, the logic zeros and the NaN values are treated as zeros.

                                e.g. Test scalars.
                                    any(0)
                                        <logical>
                                            0

                                    any(3)
                                        <logical>
                                            1

                                    any('a')
                                        <logical>
                                            1

                                    any(false)
                                        <logical>
                                            0

                                    any(true)
                                        <logical>
                                            1

                                    any(NaN)
                                        <logical>
                                            0

                                e.g. Test vectors.
                                    any([0 0 0])
                                        <logical>
                                            0

                                    any([0 0 0]')
                                        <logical>
                                            0

                                    any([0 3 0])
                                        <logical>
                                            1

                                e.g. Test arrays.
                                    any(zeros(4, 3))
                                        <logical>
                                            0   0   0

                                    any(ones(4, 3))
                                        <logical>
                                            1   1   1

                                    % The empty string is a 0x0 empty char array instead of a scalar.
                                    % And per the documentation, if the input is an empty 0x0 matrix, the function returns logical 0 (false).
                                    any('')
                                        <logical>
                                            0

                                    data = [4 0 0 1; 9 0 2 0; 0 0 0 0; 7 0 8 5]
                                        4   0   0   1
                                        9   0   2   0
                                        0   0   0   0
                                        7   0   8   5

                                    any(data)
                                        <logical>
                                            1   0   1   1

                                    any(data, 1)
                                        <logical>
                                            1   0   1   1

                                    any(data, 2)
                                        <logical>
                                            1
                                            1
                                            0
                                            1

                                    any(data, 3)
                                        <logical>
                                            1   0   0   1
                                            1   0   1   0
                                            0   0   0   0
                                            1   0   1   1

                                e.g. Reduce a logical vector to a single condition #1.
                                    data = [0.53 0.67 0.01 0.38 0.07 0.42 0.69];
                                    mapForDataBelowPointFive = data < 0.5
                                        0   0   1   1   1   1   0

                                    if any(mapForDataBelowPointFive)
                                        disp('There is at least one data item which value is below 0.5.');
                                    else
                                        disp('There is no data item which value is below 0.5.');
                                    end

                                    % The statement "if any(mapForDataBelowPointFive)" can be refined to as follows.
                                    %               "if any(data < 0.5)"

                                e.g. Reduce a logical vector to a single condition #2.
                                    data = rand(3, 4) * 5;

                                    % The syntax "data(:)" turns all the elements of "data" into a single column vector.
                                    % This type of statements can be used on arrays of any size.
                                    if any(data(:) > 3)
                                        disp('There is at least one data item which value is beyond 3.');
                                    else
                                        disp('There is no data item which value is beyond 3.');
                                    end

  ----          all             Determine if all array elements are nonzero/true.

                                e.g. Test scalars.
                                    all(0)
                                        <logical>
                                            0

                                    all(3)
                                        <logical>
                                            1

                                    all('a')
                                        <logical>
                                            1

                                    all(false)
                                        <logical>
                                            0

                                    all(true)
                                        <logical>
                                            1

                                    all(NaN)
                                        <logical>
                                            1

                                e.g. Test vectors.
                                    all([0 0 0])
                                        <logical>
                                            0

                                    all([0 0 0]')
                                        <logical>
                                            0

                                    all([0 3 0])
                                        <logical>
                                            1

                                    all([1 2 3])
                                        <logical>
                                            1

                                e.g. Test arrays.
                                    all(zeros(4, 3))
                                        <logical>
                                            0   0   0

                                    all(ones(4, 3))
                                        <logical>
                                            1   1   1

                                    % The empty string is a 0x0 empty char array instead of a scalar.
                                    % And per the documentation, if the input is an empty 0x0 matrix, the function returns logical 1 (true).
                                    all('')
                                        <logical>
                                            1

                                    data = [4 0 9 0; 9 6 2 0; 0 0 3 1; 7 4 8 5]
                                        4   0   9   0
                                        9   6   2   0
                                        0   0   3   1
                                        7   4   8   5

                                    all(data)
                                        <logical>
                                            0   0   1   0

                                    all(data, 1)
                                        <logical>
                                            0   0   1   0

                                    all(data, 2)
                                        <logical>
                                            0
                                            0
                                            0
                                            1

                                    all(data, 3)
                                        <logical>
                                            1   0   1   0
                                            1   1   1   0
                                            0   0   1   1
                                            1   1   1   1

                                e.g. Reduce a logical vector to a single condition #1.
                                    data = [0.53 0.67 0.01 0.38 0.07 0.42 0.69];
                                    mapForDataBelowPointFive = data < 0.5
                                        0   0   1   1   1   1   0

                                    if all(mapForDataBelowPointFive)
                                        disp('All data items have their values being below 0.5.');
                                    else
                                        disp('Not all data items have their values being below 0.5.');
                                    end

                                    % The statement "if all(mapForDataBelowPointFive)" can be refined to as follows.
                                    %               "if all(data < 0.5)"

                                e.g. Reduce a logical vector to a single condition #2.
                                    data = rand(3, 4) * 5;

                                    if all(data(:) > 3)
                                        disp('All data items have their values being beyond 3.');
                                    else
                                        disp('Not all data items have their values being beyond 3.');
                                    end

  ----          find            Find indices and values of nonzero array elements.

                                e.g. Find on scalars.
                                    find(0)
                                        []

                                    find(1)
                                        1

                                    find(2)
                                        1

                                    find('a')
                                        1

                                    find(false)
                                        []

                                    find(true)
                                        1

                                e.g. Find on vectors.
                                    find([0 0 0])
                                        <1x0 empty double row vector>

                                    find([1 1 1])
                                        1   2   3

                                    find([1 0 2 0 3])
                                        1   3   5

                                    find([1 0 2 0 3]')
                                        1
                                        3
                                        5

                                e.g. Find on arrays.
                                    find(zeros(3))
                                        <0x1 empty double column vector>

                                    find(ones(3))
                                        1
                                        2
                                        3
                                        4
                                        5
                                        6
                                        7
                                        8
                                        9

                                    find('')
                                        []

                                    data = [1 0 0; 0 5 0; 7 0 9]
                                        1   0   0
                                        0   5   0
                                        7   0   9

                                    find(data)
                                        1
                                        3
                                        5
                                        9

                                    find(~data)
                                        2
                                        4
                                        6
                                        7
                                        8

                                    % Get the first 3 indices.
                                    find(data, 3)
                                        1
                                        3
                                        5

                                    find(data, 3, 'first')
                                        1
                                        3
                                        5

                                    % Get the last 3 indices.
                                    find(data, 3, 'last')
                                        3
                                        5
                                        9

                                    % Get the row and column subscripts.
                                    [rowSubscripts, columnSubscripts] = find(data)
                                        rowSubscripts =
                                            1
                                            3
                                            2
                                            3

                                        columnSubscripts =
                                            1
                                            1
                                            2
                                            3

                                    % Get the row and column subscripts, and the values.
                                    [rowSubscripts, columnSubscripts, values] = find(data)
                                        rowSubscripts =
                                            1
                                            3
                                            2
                                            3

                                        columnSubscripts =
                                            1
                                            1
                                            2
                                            3

                                        values =
                                            1
                                            7
                                            5
                                            9

                                e.g. Find array elements satisfying a condition.
                                    data = magic(4)
                                           16   2   3  13
                                            5  11  10   8
                                            9   7   6  12
                                            4  14  15   1

                                    % Solution #1: Find the first 5 array elements which is less than 10.
                                    indicesOfFirst5ElementsLessThan10 = find(data < 10, 5)
                                        2
                                        3
                                        4
                                        5
                                        7

                                    data(indicesOfFirst5ElementsLessThan10)
                                        5
                                        9
                                        4
                                        2
                                        7

                                    % Solution #2: Find the first 5 array elements which is less than 10.
                                    elementsLessThan10 = data(data < 10)
                                        5
                                        9
                                        4
                                        2
                                        7
                                        3
                                        6
                                        8
                                        1

                                    elementsLessThan10(1:5)
                                        5
                                        9
                                        4
                                        2
                                        7

                                e.g. Find array elements equal to specific values.
                                    % Find integers.
                                    data = [3 7 2 11; 9 4 7 5; 7 0 8 1; 15 6 10 7]
                                        3   7   2  11
                                        9   4   7   5
                                        7   0   8   1
                                       15   6  10   7

                                    find(data == 7)
                                        3
                                        5
                                       10
                                       16

                                    % Find floating-point numbers.
                                        data = 0 : 0.1 : 1
                                            0   0.1000  0.2000  0.3000  0.4000  0.5000  0.6000  0.7000  0.8000  0.9000  1.0000

                                        % The value 0.3 cannot be found due to the floating-point roundoff error.
                                        find(data == 0.3)
                                            <1×0 empty double row vector>

                                        % As a workaround, use a tolerance value.
                                        find(abs(data - 0.3) < 0.001)
                                            4

                                e.g. Find last several nonzero array elements.
                                    data = magic(6)
                                       35   1   6  26  19  24
                                        3  32   7  21  23  25
                                       31   9   2  22  27  20
                                        8  28  33  17  10  15
                                       30   5  34  12  14  16
                                        4  36  29  13  18  11

                                    % Change all odd-indexed array elements to zero.
                                    data(1 : 2 : end) = 0

                                    % Find the last 5 nonzero array elements.
                                    find(data, 5, 'last')
                                        28
                                        30
                                        32
                                        34
                                        36

                                e.g. Find first 3 array elements that are greater than 0 and less than 10.
                                    data = [12 -3 -2 -3 8; 14 0 15 3 -5; -3 6 15 14 12; 14 15 5 11 14; 8 15 11 15 9]
                                        12    -3    -2    -3     8
                                        14     0    15     3    -5
                                        -3     6    15    14    12
                                        14    15     5    11    14
                                         8    15    11    15     9

                                    [rowSubscripts, columnSubscripts] = find(data > 0 & data < 10, 3)
                                        rowSubscripts =
                                            5
                                            3
                                            4

                                        columnSubscripts =
                                            1
                                            2
                                            3

                                e.g. Check subscripts of multidimensional arrays.
                                    data = zeros(4, 2, 3);
                                    data([1 12 19 21]) = 1
                                        data(:, :, 1) =
                                            1   0
                                            0   0
                                            0   0
                                            0   0

                                        data(:, :, 2) =
                                            0   0
                                            0   0
                                            0   0
                                            1   0

                                        data(:, :, 3) =
                                            0   1
                                            0   0
                                            1   0
                                            0   0

                                        -->

                                            1   0   0   0   0   1
                                            0   0   0   0   0   0
                                            0   0   0   0   1   0
                                            0   0   1   0   0   0
                                            | data(:, :, 1)
                                                    | data(:, :, 2)
                                                            | data(:, :, 3)

                                    [rowSubscripts, columnSubscripts] = find(data)
                                        rowSubscripts =
                                            1
                                            4
                                            3
                                            1

                                        columnSubscripts =
                                            1
                                            3
                                            5
                                            6

  ----          islogical       Determine if the input is a logical array.

                                e.g. Test scalars.
                                    islogical(0)
                                        <logical>
                                            0

                                    islogical(1)
                                        <logical>
                                            0

                                    islogical('a')
                                        <logical>
                                            0

                                    islogical(false)
                                        <logical>
                                            1

                                    islogical(true)
                                        <logical>
                                            1

                                e.g. Test vectors.
                                    islogical([0 1 0])
                                        <logical>
                                            0

                                    islogical([false true false])
                                        <logical>
                                            1

                                e.g. Test arrays.
                                    islogical(randi(9, 3, 4))
                                        <logical>
                                            0

                                    islogical(false(3, 4))
                                        <logical>
                                            1

                                    islogical(true(3, 4))
                                        <logical>
                                            1

                                    islogical('')
                                        <logical>
                                            0

                                e.g. Test others.
                                    islogical(1 > 2)
                                        <logical>
                                            1

                                    islogical(any(randi([0, 1], 3)))
                                        <logical>
                                            1

                                    islogical(islogical(1))
                                        <logical>
                                            1

  ----          logical         Convert numeric values to logical values.
                                Any nonzero element is converted to logical 1 (true) and zeros are converted to logical 0 (false).
                                Complex values and NaNs cannot be converted to logical values and result in a conversion error.

                                e.g. Convert scalars.
                                    logical(0)
                                        <logical>
                                            0

                                    logical(1)
                                        <logical>
                                            1

                                    logical(2)
                                        <logical>
                                            1

                                    logical('a')
                                        <logical>
                                            1

                                    logical(false)
                                        <logical>
                                            0

                                    logical(true)
                                        <logical>
                                            1

                                    logical(NaN)
                                        <Error: NaN's cannot be converted to logicals.>

                                e.g. Convert vectors.
                                    logical([0 1 2])
                                        <logical>
                                            0   1   1

                                    logical([0 1 2]')
                                        <logical>
                                            0
                                            1
                                            1

                                e.g. Convert arrays.
                                    data = [1 0 0; 0 5 0; 7 0 9]
                                        1   0   0
                                        0   5   0
                                        7   0   9

                                    logical(data)
                                        1   0   0
                                        0   1   0
                                        1   0   1

                                    logical('')
                                        <0x0 empty logical array>

                                e.g. Pick odd numeric array elements.
                                    data = [1 -3 2; 5 4 7; -8 1 3]
                                        1  -3   2
                                        5   4   7
                                       -8   1   3

                                    data(logical(mod(data, 2)))
                                        1
                                        5
                                       -3
                                        1
                                        7
                                        3

                                    Note: Here, the "mod(data, 2)" command returns the following result.
                                        1   1   0
                                        1   0   1
                                        0   1   1

                                    Note: Here, the "logical(mod(data, 2))" command returns the following result.
                                        <logical>
                                        1   1   0
                                        1   0   1
                                        0   1   1

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  Set Operations (Processing Unions, Intersection, Set Membership, etc.)

  issorted    | ismember   | ismembertol| unique     | uniquetol  |                                             (5)
  union       | intersect  | setdiff    | setxor     |                                                          (4)
  join        | innerjoin  | outerjoin  |                                                                       (3)

  XXXXX       | XXXXX      | XXXXX      | XXXXX      | XXXXX      | XXXXX      | XXXXX      | XXXXX      |      (?)
  XXX           XXXXX           XXXXX.

  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  Operator      Function        Description
  ------------------------------------------------------------------------------------------------------------------------
  ----          issorted        Determine whether an array is sorted.
                                <For the content, see Function List - Matrices and Arrays - Reshape and Rearrange - issorted>

  ----          ismember        Determine whether an array's elements are members of another array.

                                e.g. Test vectors.
                                    data1 = [1 2 3 4 5];
                                    data2 = [1 3 5 7 9 11 13];

                                    ismember(data1, data2)
                                        <1x5 logical array>
                                        1   0   1   0   1

                                    --------------------------------------------

                                    data1 = [1 2 3 4 5]';
                                    data2 = [1 3 5 7 9 11 13];

                                    ismember(data1, data2)
                                        <5x1 logical array>
                                        1
                                        0
                                        1
                                        0
                                        1

                                e.g. Test arrays.
                                    data1 = [1 2 3; 4 5 6; 7 8 9]
                                        1     2     3
                                        4     5     6
                                        7     8     9

                                    data2 = [1 6 7 11; 2 6 9 12]
                                        1     6     7    11
                                        2     6     9    12

                                    ismember(data1, data2)
                                        <3x3 logical array>
                                        1   1   0
                                        0   0   1
                                        1   0   1

                                    [testResultForData1, lowestElementIndexesInData2] = ismember(data1, data2)
                                        testResultForData1
                                            <3x3 logical array>
                                            1   1   0
                                            0   0   1
                                            1   0   1

                                        lowestElementIndexesInData2
                                            1   2   0
                                            0   0   3
                                            5   0   6

                                        Elements in data2
                                        Index   Value   Found
                                        ----------------------------------------
                                        1       1       Yes
                                        2       2       Yes
                                        3       6       Yes
                                        4       6
                                        5       7       Yes
                                        6       9       Yes
                                        7       11
                                        8       12
                                        ----------------------------------------

                                e.g. Test arrays (treating each row as a unit).
                                    data1 = [1 2 3; 4 5 6; 7 8 9]
                                        1     2     3
                                        4     5     6
                                        7     8     9

                                    data2 = [1 1 1; 4 5 6; 2 2 2]
                                        1     1     1
                                        4     5     6
                                        2     2     2

                                    ismember(data1, data2)
                                        <3x3 logical array>
                                        1   1   0
                                        1   1   1
                                        0   0   0

                                    ismember(data1, data2, 'rows')
                                        <3x1 logical array>
                                        0
                                        1
                                        0

                                    [testResultForData1, lowestRowIndexesInData2] = ismember(data1, data2, 'rows')
                                        testResultForData1
                                            <3x1 logical array>
                                            0
                                            1
                                            0

                                        lowestRowIndexesInData2
                                            0
                                            2
                                            0

                                e.g. Test arrays (tables).
                                    data1 = table([1:5]', ['A':'E']', [false true false true false]')
                                        Var1    Var2    Var3
                                        ----    ----    -----
                                        1       A       false
                                        2       B       true
                                        3       C       false
                                        4       D       true
                                        5       E       false

                                    data2 = table([1:2:9]', ['A':2:'I']', false(5, 1))
                                        Var1    Var2    Var3
                                        ----    ----    -----
                                        1       A       false
                                        3       C       false
                                        5       E       false
                                        7       G       false
                                        9       I       false

                                    ismember(data1, data2)
                                        <5x1 logical array>
                                        1
                                        0
                                        1
                                        0
                                        1

  ----          ismembertol     Determine whether an array's elements are members of another array, within tolerance.
                                Notes:
                                - 2 values, X (from the array A) and Y (from the array B), are within tolerance if they satisfy the following expression.
                                    abs(X - Y) <= toleranceValue * max(abs([A(:); B(:)]))
                                - If a tolerance value is not provided, a default tolerance value is used, as follows.
                                  - For single-precision inputs: 1e-6
                                  - For double-precision inputs: 1e-12

                                e.g. Test vectors.
                                    data1 = [1 2 3 4 5];
                                    data2 = [1 3 5 7 9 11 13];

                                    ismembertol(data1, data2)
                                        <1x5 logical array>
                                        1   0   1   0   1

                                    --------------------------------------------

                                    data1 = [1 2 3 4 5]';
                                    data2 = [1 3 5 7 9 11 13];

                                    ismembertol(data1, data2)
                                        <5x1 logical array>
                                        1
                                        0
                                        1
                                        0
                                        1

                                    --------------------------------------------

                                    data1 = [1 2 3 4 5 6] * pi
                                        3.1416    6.2832    9.4248   12.5664   15.7080   18.8496

                                    data2 = 10 .^ log10(data1)
                                        3.1416    6.2832    9.4248   12.5664   15.7080   18.8496

                                    % Though looking same, the variables "data1" and "data2" are actually not equal, proved by the following command and its output.
                                    data1 - data2
                                        <1.0e-14 *>
                                        0.0444         0         0         0         0   -0.3553

                                    ismember(data1, data2)
                                        <1x6 logical array>
                                        0   1   1   1   1   0

                                    ismembertol(data1, data2)
                                        <1x6 logical array>
                                        1   1   1   1   1   1

                                    --------------------------------------------

                                    data1 = [1 1.5 3 4.5 5]
                                        1.0000    1.5000    3.0000    4.5000    5.0000

                                    data2 = [1 2 3 4 5]
                                        1     2     3     4     5

                                    ismembertol(data1, data2)
                                        <1x5 logical array>
                                        1   0   1   0   1

                                    ismembertol(data1, data2, 0.1)
                                        ------------------------------------------------------------
                                        MC: 0.1 * max(abs([data1(:); data2(:)])) -> 0.5
                                        MC: abs(2 - 1.5000) <= 0.5  Yes
                                        MC: abs(4.5 - 4) <= 0.5     Yes
                                        ------------------------------------------------------------
                                        <1x5 logical array>
                                        1   1   1   1   1

                                e.g. Test arrays.
                                    data1 = [1 2 3; 4 5 6; 7 8 9]
                                        1     2     3
                                        4     5     6
                                        7     8     9

                                    data2 = [1 6 7 11; 2 6 9 12]
                                        1     6     7    11
                                        2     6     9    12

                                    ismembertol(data1, data2)
                                        <3x3 logical array>
                                        1   1   0
                                        0   0   1
                                        1   0   1

                                    [testResultForData1, lowestElementIndexesInData2] = ismembertol(data1, data2)
                                        testResultForData1
                                            <3x3 logical array>
                                            1   1   0
                                            0   0   1
                                            1   0   1

                                        lowestElementIndexesInData2
                                            1   2   0
                                            0   0   3
                                            5   0   6

                                        Elements in data2
                                        Index   Value   Found
                                        ----------------------------------------
                                        1       1       Yes
                                        2       2       Yes
                                        3       6       Yes
                                        4       6
                                        5       7       Yes
                                        6       9       Yes
                                        7       11
                                        8       12
                                        ----------------------------------------

                                    --------------------------------------------

                                    data1 = [1 2 3; 4 5 6; 7 8 9]
                                        1     2     3
                                        4     5     6
                                        7     8     9

                                    data2 = [1 1 1; 4 5 6; 2 2 2]
                                        1     1     1
                                        4     5     6
                                        2     2     2

                                    ismembertol(data1, data2)
                                        <3x3 logical array>
                                        1   1   0
                                        1   1   1
                                        0   0   0

                                    ismembertol(data1, data2, 'rows')
                                        <Error: Tolerance value TOL must be a real, full (non-sparse), positive numeric scalar of type single or double.>

                                    ismembertol(data1, data2, 'ByRows', true)
                                        <3x1 logical array>
                                        0
                                        1
                                        0

  ----          unique          Determine unique array elements.
  ----          uniquetol       Determine unique array elements, within tolerance.
  ----          union           Set union of two arrays.
  ----          intersect       Set intersection of two arrays.
  ----          setdiff         Set difference of two arrays.
  ----          setxor          Set exclusive OR of two arrays.

  ----          join            Combine strings, or merge two tables/timetables.

                                e.g. Join strings #1: Invalid and valid inputs.
                                    % When joining strings, the target should be a string array or cell array of character vectors.

                                    data1 = 'abc'
                                        abc

                                    data2 = ['a' 'b' 'c']
                                        abc

                                    data3 = string('abc')
                                        <string>
                                            "abc"

                                    data4 = {'a' 'b' 'c'}
                                        <1x3 cell array>
                                            'a' 'b' 'c'

                                    isequal(data1, data2)
                                        1

                                    whos
                                        Name       Size     Bytes  Class    Attributes
                                        ------------------------------------------------------------
                                        data1      1x3          6  char
                                        data2      1x3          6  char
                                        data3      1x1        134  string
                                        data4      1x3        342  cell

                                    join(data1)
                                        <Error: First argument must be a string array or cell array of character vectors.>

                                    join(data2)
                                        <Error: First argument must be a string array or cell array of character vectors.>

                                    join(data3)
                                        <string>
                                            "abc"

                                    join(data4)
                                        <string>
                                            "a b c"

                                e.g. Join strings #2: Normal uses and specifying dimensions.
                                    data1 = [string('Nan') string('loves') string('Ting.')]
                                        <1x3 string array>
                                            "Nan"    "loves"    "Ting."

                                    data2 = {'Nan' 'loves' 'Ting.'}
                                        <1x3 cell array>
                                            'Nan'    'loves'    'Ting.'

                                    join(data1)
                                        <string>
                                            "Nan loves Ting."

                                    join(data2)
                                        <string>
                                            "Nan loves Ting."

                                    join(data1) == join(data2)
                                        <logical>
                                            1

                                    ------------------------

                                    data = {'A' 'B' 'C'};

                                    join(data)
                                        <string>
                                            "A B C"

                                    join(data')
                                        <string>
                                            "A B C"

                                    join(data) == join(data')
                                        <logical>
                                            1

                                    ------------------------

                                    data = {'Michael', 'Jackson';
                                            'Shania', 'Twain';
                                            'John', 'Denver'}
                                        <3x2 cell array>
                                            'Michael'    'Jackson'
                                            'Shania'     'Twain'
                                            'John'       'Denver'

                                    join(data)
                                        <3x1 string array>
                                            "Michael Jackson"
                                            "Shania Twain"
                                            "John Denver"

                                    join(data, 1)
                                        <1x2 string array>
                                            "Michael Shania John"    "Jackson Twain Denver"

                                    join(data, 2)
                                        <3x1 string array>
                                            "Michael Jackson"
                                            "Shania Twain"
                                            "John Denver"

                                    isequal(join(data, 2), join(data))
                                        <logical>
                                            1

                                e.g. Join strings #3: Using delimiters.
                                    data = {'ABC' 'DEF' 'GHI'}
                                        <1x3 cell array>
                                            'ABC'    'DEF'    'GHI'

                                    join(data)
                                        <string>
                                            "ABC DEF GHI"

                                    join(data, ',')
                                        <string>
                                            "ABC,DEF,GHI"

                                    join(data, ', ')
                                        <string>
                                            "ABC, DEF, GHI"

                                    join(data, ' | ')
                                        <string>
                                            "ABC | DEF | GHI"

                                    string('(') + join(data, ') (') + string(')')
                                        <string>
                                            "(ABC) (DEF) (GHI)"

                                    ------------------------

                                    data = {'X' 'Y' 'Z'}
                                        <1x3 cell array>
                                            'X'    'Y'    'Z'

                                    join(data, {' + ', ' = '})
                                        <string>
                                            "X + Y = Z"

                                    ------------------------

                                    data = {'X' 'Y' 'Z';
                                            'A' 'B' 'C';
                                            'I' 'J' 'K'}
                                        <3x3 cell array>
                                            'X'    'Y'    'Z'
                                            'A'    'B'    'C'
                                            'I'    'J'    'K'

                                    join(data)
                                        <3x1 string array>
                                            "X Y Z"
                                            "A B C"
                                            "I J K"

                                    delimiters = {' + ', ' = '; ' - ', ' = '; ' * ', ' = '}
                                        <3x2 cell array>
                                            ' + '    ' = '
                                            ' - '    ' = '
                                            ' * '    ' = '

                                    join(data, delimiters)
                                        <3x1 string array>
                                            "X + Y = Z"
                                            "A - B = C"
                                            "I * J = K"

                                    delimitersAdjusted = rot90(delimiters, 3)
                                        <2x3 cell array>
                                            ' * '    ' - '    ' + '
                                            ' = '    ' = '    ' = '

                                    join(data, delimitersAdjusted, 1)
                                        <1x3 string array>
                                            "X * A = I"    "Y - B = J"    "Z + C = K"

                                e.g. Join tables/timetables #1: Normal joins (Employees and Managers).
                                    employees = table({'Jack', 'Mary', 'Tom', 'Lisa', 'Peter'}',...
                                                      {'DEV', 'HR', 'DEV', 'QA', 'HR'}',...
                                                      [29, 35, 24, 22, 30]',...
                                                      'VariableNames', {'Employee', 'Department', 'Age'})
                                        Employee    Department    Age
                                        --------    ----------    ---
                                        'Jack'      'DEV'         29
                                        'Mary'      'HR'          35
                                        'Tom'       'DEV'         24
                                        'Lisa'      'QA'          22
                                        'Peter'     'HR'          30

                                    managers = table({'DEV', 'HR', 'QA'}',...
                                                     {'David', 'Susan', 'Catherine'}',...
                                                     'VariableNames', {'Department', 'Manager'})
                                        Department  Manager
                                        ----------  -----------
                                        'DEV'       'David'
                                        'HR'        'Susan'
                                        'QA'        'Catherine'

                                    % The only common variable "Department" is used as the key variable
                                    % to join the "employees" and "managers" tables.
                                    join(employees, managers)
                                        Employee    Department    Age   Manager
                                        --------    ----------    ---   -----------
                                        'Jack'      'DEV'         29    'David'
                                        'Mary'      'HR'          35    'Susan'
                                        'Tom'       'DEV'         24    'David'
                                        'Lisa'      'QA'          22    'Catherine'
                                        'Peter'     'HR'          30    'Susan'

                                e.g. Join tables/timetables #2: Joins ignoring unnecessary information (Food Information).
                                    favoriteFood = table([29, 35, 24, 22, 30]',...
                                                         {'Cereal', 'Pizza', 'Salmon', 'Cookie', 'Pizza'}',...
                                                         'VariableNames', {'Age', 'Food'},...
                                                         'RowNames', {'Jack', 'Mary', 'Tom', 'Lisa', 'Peter'}')
                                                    Age     Food
                                                    ---     --------
                                         Jack       29      'Cereal'
                                         Mary       35      'Pizza'
                                         Tom        24      'Salmon'
                                         Lisa       22      'Cookie'
                                         Peter      30      'Pizza'

                                    foodInfo = table({'Cereal', 'Pizza', 'Salmon', 'Cookie', 'Cake'}',...
                                                     [110, 160, 140, 367, 243]',...
                                                     {'B', 'D', 'B-', 'A', 'C-'}',...
                                                     'VariableNames', {'Food', 'Calories', 'NutritionGrade'})
                                        Food        Calories    NutritionGrade
                                        --------    --------    --------------
                                        'Cereal'    110         'B'
                                        'Pizza'     160         'D'
                                        'Salmon'    140         'B-'
                                        'Cookie'    367         'A'
                                        'Cake'      243         'C-'

                                    % Note: The information about the food "cake" is not displayed
                                    %       since the food "cake" has no corresponding entry in the "favoriteFood" table.
                                    join(favoriteFood, foodInfo)
                                                    Age     Food        Calories    NutritionGrade
                                                    ---     --------    --------    --------
                                         Jack       29      'Cereal'    110         'B'
                                         Mary       35      'Pizza'     160         'D'
                                         Tom        24      'Salmon'    140         'B-'
                                         Lisa       22      'Cookie'    367         'A'
                                         Peter      30      'Pizza'     160         'D'

                                e.g. Join tables/timetables #3: Joins specifying the key variables.
                                    table1 = table([11, 13, 15, 17, 19]',...
                                                   [12, 14, 16, 18, 20]',...
                                                   {'abc', 'def', 'ghi', 'jkl', 'mno'}',...
                                                   'VariableNames', {'VAR1', 'VAR2', 'VAR31'})
                                        VAR1    VAR2    VAR31
                                        ----    ----    -----
                                        11      12      'abc'
                                        13      14      'def'
                                        15      16      'ghi'
                                        17      18      'jkl'
                                        19      20      'mno'

                                    table2 = table([11, 13, 15, 18, 19]',...
                                                   [12, 14, 16, 18, 20]',...
                                                   [true, false, true, false, true]',...
                                                   'VariableNames', {'VAR1', 'VAR2', 'VAR32'})
                                        VAR1    VAR2    VAR32
                                        ----    ----    -----
                                        11      12      true
                                        13      14      false
                                        15      16      true
                                        18      18      false
                                        19      20      true

                                    join(table1, table2)
                                        <Error: The key variables for B must contain all unique combinations of values in the key variables for A.>

                                    join(table1, table2, 'Keys', 'VAR2')
                                        VAR1-table1    VAR2    VAR31    VAR1-table2    VAR32
                                        -----------    ----    -----    -----------    -----
                                        11             12      'abc'    11             true
                                        13             14      'def'    13             false
                                        15             16      'ghi'    15             true
                                        17             18      'jkl'    18             false
                                        19             20      'mno'    19             true

                                    % Keep only one copy of non-key variables by using the "KeepOneCopy" property.
                                    join(table1, table2, 'Keys', 'VAR2', 'KeepOneCopy','VAR1')
                                        VAR1    VAR2    VAR31    VAR32
                                        ----    ----    -----    -----
                                        11      12      'abc'    true
                                        13      14      'def'    false
                                        15      16      'ghi'    true
                                        17      18      'jkl'    false
                                        19      20      'mno'    true

                                e.g. Join tables/timetables #4: Joins specifying the key variables (respectively of both tables).
                                    table1 = table([10 4 2 3 7]', [5 4 9 6 1]', [10 3 8 8 4]')
                                        Var1    Var2    Var3
                                        ----    ----    ----
                                        10      5       10
                                         4      4        3
                                         2      9        8
                                         3      6        8
                                         7      1        4

                                    table2 = table([6 1 1 6 8]', [2 3 4 7 10]')
                                        Var1    Var2
                                        ----    ----
                                        6        2
                                        1        3
                                        1        4
                                        6        7
                                        8       10

                                    MC: The "Var1" values in the "table1" table are same as
                                        the "Var2" values in the "table2" table, except for order.

                                    [table3, rowOrderInTable2] = join(table1, table2, 'LeftKeys', 1, 'RightKeys', 2)
                                        table3 =
                                            Var1-table1    Var2    Var3    Var1-table2
                                            -----------    ----    ----    -----------
                                            10             5       10      8
                                             4             4        3      1
                                             2             9        8      6
                                             3             6        8      1
                                             7             1        4      6

                                        rowOrderInTable2 =
                                             5
                                             3
                                             1
                                             2
                                             4

                                e.g. Join tables/timetables #5: Joins using the row names (Physical Examination).
                                    physicalExam1 = table({'Male', 'Female', 'Male', 'Female', 'Male'}',...
                                                          [29, 35, 24, 22, 30]',...
                                                          'VariableNames', {'Gender', 'Age'},...
                                                          'RowNames', {'Jack', 'Mary', 'Tom', 'Lisa', 'Peter'}')
                                                    Gender      Age
                                                    --------    ---
                                        Jack        'Male'      29
                                        Mary        'Female'    35
                                        Tom         'Male'      24
                                        Lisa        'Female'    22
                                        Peter       'Male'      30

                                    physicalExam2 = table([175, 158, 166, 172, 170]',...
                                                          [89.5, 49.7, 75.8, 54.1, 65.2]',...
                                                          [122 80; 109 77; 117 75; 124 93; 125 83],...
                                                          'VariableNames', {'Height', 'Weight', 'BloodPressure'},...
                                                          'RowNames', {'Jack', 'Mary', 'Tom', 'Lisa', 'Peter'}')
                                                    Height    Weight    BloodPressure
                                                    ------    ------    -------------
                                        Jack        175       89.5      122     80
                                        Mary        158       49.7      109     77
                                        Tom         166       75.8      117     75
                                        Lisa        172       54.1      124     93
                                        Peter       170       65.2      125     83

                                    join(physicalExam1, physicalExam2)
                                        <Error: Cannot find a common table variable to use as a key variable.>

                                    join(physicalExam1, physicalExam2, 'Keys', 'RowNames')
                                                    Gender     Age    Height    Weight    BloodPressure
                                                    --------   ---    ------    ------    -------------
                                        Jack        'Male'     29     175       89.5      122     80
                                        Mary        'Female'   35     158       49.7      109     77
                                        Tom         'Male'     24     166       75.8      117     75
                                        Lisa        'Female'   22     172       54.1      124     93
                                        Peter       'Male'     30     170       65.2      125     83

                                e.g. Join tables/timetables #6: Joins timetables (Traffic Data).
                                    Traffic = [0.8 0.9 0.1 0.7 0.9]';
                                    Noise = [0 1 1.5 2 2.3]';
                                    TrafficData1 = timetable(hours(1:5)', Traffic, Noise)
                                        Time    Traffic    Noise
                                        ----    -------    -----
                                        1 hr    0.8          0
                                        2 hr    0.9          1
                                        3 hr    0.1        1.5
                                        4 hr    0.7          2
                                        5 hr    0.9        2.3

                                    Distance  = [0.88 0.86 0.91 0.94 0.86]';
                                    TrafficData2 = timetable(hours(1:5)', Distance)
                                        Time    Distance
                                        ----    --------
                                        1 hr    0.88
                                        2 hr    0.86
                                        3 hr    0.91
                                        4 hr    0.94
                                        5 hr    0.86

                                    join(TrafficData1, TrafficData2)
                                        Time    Traffic    Noise    Distance
                                        ----    -------    -----    --------
                                        1 hr    0.8          0      0.88
                                        2 hr    0.9          1      0.86
                                        3 hr    0.1        1.5      0.91
                                        4 hr    0.7          2      0.94
                                        5 hr    0.9        2.3      0.86

                                e.g. Join tables/timetables #7: Joins tables and timetables (Measurement Data).
                                    measurements = [0.13 0.22 0.31 0.42 0.53 0.57 0.67 0.81 0.90 1.00]';
                                    devices = ['A' 'B' 'B' 'C' 'A' 'C' 'B' 'A' 'A' 'C']';
                                    measurementTable = timetable(seconds(1:10)', measurements, devices, 'VariableNames', {'Measurement', 'Device'})
                                          Time    Measurement    Device
                                        ------    -----------    ------
                                         1 sec    0.13           A
                                         2 sec    0.22           B
                                         3 sec    0.31           B
                                         4 sec    0.42           C
                                         5 sec    0.53           A
                                         6 sec    0.57           C
                                         7 sec    0.67           B
                                         8 sec    0.81           A
                                         9 sec     0.9           A
                                        10 sec       1           C

                                    deviceAccuracyTable = table(['A' 'B' 'C' 'D']',...
                                                                [0.023 0.037 0.012 0.005]',...
                                                                'VariableNames', {'Device', 'Accuracy'})
                                        Device    Accuracy
                                        ------    --------
                                        A         0.023
                                        B         0.037
                                        C         0.012
                                        D         0.005

                                    join(measurementTable, deviceAccuracyTable)
                                          Time    Measurement    Device    Accuracy
                                        ------    -----------    ------    --------
                                         1 sec    0.13           A         0.023
                                         2 sec    0.22           B         0.037
                                         3 sec    0.31           B         0.037
                                         4 sec    0.42           C         0.012
                                         5 sec    0.53           A         0.023
                                         6 sec    0.57           C         0.012
                                         7 sec    0.67           B         0.037
                                         8 sec    0.81           A         0.023
                                         9 sec     0.9           A         0.023
                                        10 sec       1           C         0.012

  ----          innerjoin       Perform inner join between two tables/timetables and return the result.

                                The result is the inner join between the two tables/timetables, by matching up rows using all the variables with the same name as key variables (or the specified key variables).
                                The result retains only rows existing in both tables/timetables.

                                e.g. Perform a normal inner join.
                                    tableA = table([1 2 3 4 5]',...
                                                   {'B' 'C' 'A' 'G' 'D'}',...
                                                   'VariableNames', {'VAR_1', 'VAR_2'})
                                        VAR-1    VAR-2
                                        -----    -----
                                        1        'B'
                                        2        'C'
                                        3        'A'
                                        4        'G'
                                        5        'D'

                                    tableB = table({'A' 'B' 'C' 'D' 'E' 'F'}',...
                                                   [true, false, true, true, false, true]',...
                                                   [5.23, 7.49, 3.16, 4.83, 2.94, 9.71]',...
                                                   'VariableNames', {'VAR_2', 'VAR_3', 'VAR_4'})
                                        VAR-2    VAR-3    VAR-4
                                        -----    -----    -----
                                        'A'      true     5.23
                                        'B'      false    7.49
                                        'C'      true     3.16
                                        'D'      true     4.83
                                        'E'      false    2.94
                                        'F'      true     9.71

                                    innerjoin(tableA, tableB)
                                        % - The result's content is sorted by VAR-2 values in tableB.
                                        % - The row having the VAR-2 value of 'G' in the tableA and
                                        %   the rows having the VAR-2 value of 'E'/'F' in tableB
                                        %   are not included in the result because they are not part of the inner join.
                                        VAR-1    VAR-2    VAR-3    VAR-4
                                        -----    -----    -----    -----
                                        3        'A'      true     5.23
                                        1        'B'      false    7.49
                                        2        'C'      true     3.16
                                        5        'D'      true     4.83

                                    --------------------------------------------

                                    % Try to see what happens if performing a join.
                                    % An error occurs telling tableB is missing some values related to tableA (it is the VAR-2 value 'G').
                                    join(tableA, tableB)
                                        <Error: The key variable for B must contain all values in the key variable for A.>

                                    % Change tableB to enable the join.
                                    tableB = table({'A' 'B' 'C' 'D' 'E' 'F' 'G'}',...
                                                   [true, false, true, true, false, true, false]',...
                                                   [5.23, 7.49, 3.16, 4.83, 2.94, 9.71, 6.58]',...
                                                   'VariableNames', {'VAR_2', 'VAR_3', 'VAR_4'})
                                        VAR-2    VAR-3    VAR-4
                                        -----    -----    -----
                                        'A'      true     5.23
                                        'B'      false    7.49
                                        'C'      true     3.16
                                        'D'      true     4.83
                                        'E'      false    2.94
                                        'F'      true     9.71
                                        'G'      false    6.58

                                    join(tableA, tableB)
                                        VAR_1    VAR_2    VAR_3    VAR_4
                                        -----    -----    -----    -----
                                        1        'B'      false    7.49
                                        2        'C'      true     3.16
                                        3        'A'      true     5.23
                                        4        'G'      false    6.58
                                        5        'D'      true     4.83

                                    --------------------------------------------

                                    % Get row indexes in tableA and tableB, together with the inner join result.
                                    [result, rowIndexesA, rowIndexesB] = innerjoin(tableA, tableB)
                                        result =
                                            VAR-1    VAR-2    VAR-3    VAR-4
                                            -----    -----    -----    -----
                                            3        'A'      true     5.23
                                            1        'B'      false    7.49
                                            2        'C'      true     3.16
                                            5        'D'      true     4.83

                                        rowIndexesA =
                                            3
                                            1
                                            2
                                            5

                                        rowIndexesB =
                                            1
                                            2
                                            3
                                            4

                                e.g. Perform an inner join with multiple key variables.
                                    tableA = table([1 2 3 4 5]',...
                                                   {'B' 'C' 'A' 'G' 'D'}',...
                                                   [false, false, true, true, false]',...
                                                   'VariableNames', {'VAR_1', 'VAR_2', 'VAR_3'})
                                        VAR-1    VAR-2    VAR-3
                                        -----    -----    -----
                                        1        'B'      false
                                        2        'C'      false
                                        3        'A'      true
                                        4        'G'      true
                                        5        'D'      false

                                    tableB = table({'A' 'B' 'C' 'D' 'E' 'F'}',...
                                                   [true, false, true, true, false, true]',...
                                                   [5.23, 7.49, 3.16, 4.83, 2.94, 9.71]',...
                                                   'VariableNames', {'VAR_2', 'VAR_3', 'VAR_4'})
                                        VAR-2    VAR-3    VAR-4
                                        -----    -----    -----
                                        'A'      true     5.23
                                        'B'      false    7.49
                                        'C'      true     3.16
                                        'D'      true     4.83
                                        'E'      false    2.94
                                        'F'      true     9.71

                                    innerjoin(tableA, tableB)
                                        VAR-1    VAR-2    VAR-3    VAR-4
                                        -----    -----    -----    -----
                                        3        'A'      true     5.23
                                        1        'B'      false    7.49

                                e.g. Perform an inner join, specifying the key variables respectively of both tables.
                                    tableA = table([1 2 3 4 5]',...
                                                   {'B' 'C' 'A' 'G' 'D'}')
                                        Var1    Var2
                                        ----    ----
                                        1       'B'
                                        2       'C'
                                        3       'A'
                                        4       'G'
                                        5       'D'

                                    tableB = table([true, false, true, true, false]',...
                                                   [7 4 3 2 6]')
                                        Var1    Var2
                                        -----   ----
                                        true    7
                                        false   4
                                        true    3
                                        true    2
                                        false   6

                                    innerjoin(tableA, tableB, 'LeftKeys', 1, 'RightKeys', 2)
                                        Var1-tableA    Var2    Var1-tableB
                                        -----------    ----    -----------
                                        2              'C'     true
                                        3              'A'     true
                                        4              'G'     false

                                e.g. Perform an inner join on timetables.
                                    tableA = timetable(seconds([1 2 3 4]'), ['A' 'B' 'C' 'D']')
                                         Time    Var1
                                        -----    ----
                                        1 sec    A
                                        2 sec    B
                                        3 sec    C
                                        4 sec    D

                                    tableB = timetable(seconds([2 3 4 5]'), [true false true false]')
                                         Time    Var1
                                        -----    -----
                                        2 sec    true
                                        3 sec    false
                                        4 sec    true
                                        5 sec    false

                                    innerjoin(tableA, tableB)
                                         Time    Var1-tableA    Var1-tableB
                                        -----    -----------    -----------
                                        2 sec    B              true
                                        3 sec    C              false
                                        4 sec    D              true

  ----          outerjoin       Perform outer join between two tables/timetables and return the result.

                                The result is the outer join between the two tables/timetables, by matching up rows using all the variables with the same name as key variables (or the specified key variables).
                                The result retains all rows existing in either of the two tables/timetables.

                                e.g. Perform a normal outer join.
                                    tableA = table([1 2 3 4 5]',...
                                                   {'B' 'C' 'A' 'G' 'D'}',...
                                                   'VariableNames', {'VAR_1', 'VAR_2'})
                                        VAR-1    VAR-2
                                        -----    -----
                                        1        'B'
                                        2        'C'
                                        3        'A'
                                        4        'G'
                                        5        'D'

                                    tableB = table({'A' 'B' 'C' 'D' 'E' 'F'}',...
                                                   [true, false, true, true, false, true]',...
                                                   [5.23, 7.49, 3.16, 4.83, 2.94, 9.71]',...
                                                   'VariableNames', {'VAR_2', 'VAR_3', 'VAR_4'})
                                        VAR-2    VAR-3    VAR-4
                                        -----    -----    -----
                                        'A'      true     5.23
                                        'B'      false    7.49
                                        'C'      true     3.16
                                        'D'      true     4.83
                                        'E'      false    2.94
                                        'F'      true     9.71

                                    outerjoin(tableA, tableB)
                                        % - The rows containing the unmatched key variable values are still included in the result,
                                            but these kind of rows normally contain missing non-key variable values.
                                        % - For unmatched values in key variables, all missing values are filled with values per following rules.
                                            - If the missing value is a numeric, fill it with a NaN;
                                            - If the missing value is a string, fill it with an empty string ('');
                                            - If the missing value is a logical, fill it with a logical 0 (false).
                                        VAR_1    VAR_2_tableA    VAR_2_tableB    VAR_3    VAR_4
                                        -----    ------------    ------------    -----    -----
                                        3        'A'             'A'             true     5.23
                                        1        'B'             'B'             false    7.49
                                        2        'C'             'C'             true     3.16
                                        5        'D'             'D'             true     4.83
                                        NaN      ''              'E'             false    2.94
                                        NaN      ''              'F'             true     9.71
                                        4        'G'             ''              false    NaN

                                    --------------------------------------------

                                    % Get row indexes in tableA and tableB, together with the outer join result.
                                    [result, rowIndexesA, rowIndexesB] = outerjoin(tableA, tableB)
                                        % Indexes of rows containing the unmatched key variable values are all zeros.
                                        result =
                                            VAR_1    VAR_2_tableA    VAR_2_tableB    VAR_3    VAR_4
                                            -----    ------------    ------------    -----    -----
                                            3        'A'             'A'             true     5.23
                                            1        'B'             'B'             false    7.49
                                            2        'C'             'C'             true     3.16
                                            5        'D'             'D'             true     4.83
                                            NaN      ''              'E'             false    2.94
                                            NaN      ''              'F'             true     9.71
                                            4        'G'             ''              false    NaN

                                        rowIndexesA =
                                            3
                                            1
                                            2
                                            5
                                            0
                                            0
                                            4

                                        rowIndexesB =
                                            1
                                            2
                                            3
                                            4
                                            5
                                            6
                                            0

                                e.g. Perform an outer join with multiple key variables.
                                    tableA = table([1 2 3 4 5]',...
                                                   {'B' 'C' 'A' 'G' 'D'}',...
                                                   [false, false, true, true, false]',...
                                                   'VariableNames', {'VAR_1', 'VAR_2', 'VAR_3'})
                                        VAR-1    VAR-2    VAR-3
                                        -----    -----    -----
                                        1        'B'      false
                                        2        'C'      false
                                        3        'A'      true
                                        4        'G'      true
                                        5        'D'      false

                                    tableB = table({'A' 'B' 'C' 'D' 'E' 'F'}',...
                                                   [true, false, true, true, false, true]',...
                                                   [5.23, 7.49, 3.16, 4.83, 2.94, 9.71]',...
                                                   'VariableNames', {'VAR_2', 'VAR_3', 'VAR_4'})
                                        VAR-2    VAR-3    VAR-4
                                        -----    -----    -----
                                        'A'      true     5.23
                                        'B'      false    7.49
                                        'C'      true     3.16
                                        'D'      true     4.83
                                        'E'      false    2.94
                                        'F'      true     9.71

                                    outerjoin(tableA, tableB)
                                        VAR_1    VAR_2_tableA    VAR_3_tableA    VAR_2_tableB    VAR_3_tableB    VAR_4
                                        -----    ------------    ------------    ------------    ------------    -----
                                          3      'A'             true            'A'             true            5.23
                                          1      'B'             false           'B'             false           7.49
                                          2      'C'             false           ''              false            NaN
                                        NaN      ''              false           'C'             true            3.16
                                          5      'D'             false           ''              false            NaN
                                        NaN      ''              false           'D'             true            4.83
                                        NaN      ''              false           'E'             false           2.94
                                        NaN      ''              false           'F'             true            9.71
                                          4      'G'             true            ''              false            NaN

                                e.g. Perform an outer join, specifying the key variables respectively of both tables.
                                    tableA = table([1 2 3 4 5]',...
                                                   {'B' 'C' 'A' 'G' 'D'}')
                                        Var1    Var2
                                        ----    ----
                                        1       'B'
                                        2       'C'
                                        3       'A'
                                        4       'G'
                                        5       'D'

                                    tableB = table([true, false, true, true, false]',...
                                                   [7 4 3 2 6]')
                                        Var1    Var2
                                        -----   ----
                                        true    7
                                        false   4
                                        true    3
                                        true    2
                                        false   6

                                    outerjoin(tableA, tableB, 'LeftKeys', 1, 'RightKeys', 2)
                                        Var1-tableA    Var2-tableA    Var1-tableB    Var2-tableB
                                        -----------    -----------    -----------    -----------
                                          1            'B'            false          NaN
                                          2            'C'            true             2
                                          3            'A'            true             3
                                          4            'G'            false            4
                                          5            'D'            false          NaN
                                        NaN            ''             false            6
                                        NaN            ''             true             7

                                e.g. Perform an outer join on timetables.
                                    tableA = timetable(seconds([1 2 3 4]'), ['A' 'B' 'C' 'D']')
                                         Time    Var1
                                        -----    ----
                                        1 sec    A
                                        2 sec    B
                                        3 sec    C
                                        4 sec    D

                                    tableB = timetable(seconds([2 3 4 5]'), [true false true false]')
                                         Time    Var1
                                        -----    -----
                                        2 sec    true
                                        3 sec    false
                                        4 sec    true
                                        5 sec    false

                                    outerjoin(tableA, tableB)
                                         Time    Var1-tableA    Var1-tableB
                                        -----    -----------    -----------
                                        1 sec    A              false
                                        2 sec    B              true
                                        3 sec    C              false
                                        4 sec    D              true
                                        5 sec                   false

========================================
Function List
========================================
Matrices and Arrays
    Create and Combine Arrays
    Create Grids
    Determine Size and Shape
    Reshape and Rearrange
    Control Indexing
================================================================================
Matrices and Arrays - Create and Combine Arrays
================================================================================
zeros / ones / rand / magic / eye / repelem / repmat / cat / true / false
diag / blkdiag / horzcat / vertcat
Function        Brief
------------------------------------------------------------------------------------------------------------------------
zeros           Create an array which elements are all zeros.

                e.g.
                    zeros(3)
                        0   0   0
                        0   0   0
                        0   0   0

                    zeros(3, 4)
                        0   0   0   0
                        0   0   0   0
                        0   0   0   0

                    zeros
                        0

ones            Create an array which elements are all ones.

                e.g.
                    ones(3)
                        1   1   1
                        1   1   1
                        1   1   1

                    ones(3, 4)
                        1   1   1   1
                        1   1   1   1
                        1   1   1   1

                    ones
                        1

rand            Create an array which elements are all uniformly distributed random numbers.

                e.g.
                    rand(3)
                        0.8147  0.9134  0.2785
                        0.9058  0.6324  0.5469
                        0.1270  0.0975  0.9575

                    rand(3, 4)
                        0.9649  0.9572  0.1419  0.7922
                        0.1576  0.4854  0.4218  0.9595
                        0.9706  0.8003  0.9157  0.6557

                    rand
                        0.0357

magic           Create a magic square matrix.
                The matrix is constructed from the integers 1 through n^2 with equal row/column/diagonal sums.

                e.g.
                    magic(3)
                        8   1   6
                        3   5   7
                        4   9   2

                    magic(4)
                       16    2   3  13
                        5   11  10   8
                        9    7   6  12
                        4   14  15   1

eye             Create an identity matrix.
                Note: Actually, this function creates not only identity matrices.
                      The consistent behavior of this function is to set its elements ones on its main diagonal and zeros elsewhere.

                e.g.
                    eye(3)
                        1   0   0
                        0   1   0
                        0   0   1

                    eye(3, 4)
                        1   0   0   0
                        0   1   0   0
                        0   0   1   0

                    eye
                        1

repelem         Repeat copies of array elements to create an new array.

                e.g.
                    someArray = [1 2 3 4]

                    repelem(someArray, 3)
                        1   1   1   2   2   2   3   3   3   4   4   4

                    repelem(someArray, [4, 2, 1, 5])
                        1   1   1   1   2   2   3   4   4   4   4   4

repmat          Repeat copies of array to create an new array.

                e.g.
                    someArray = diag([100 200 300])
                        100     0     0
                          0   200     0
                          0     0   300

                    repmat(someArray, 2)
                        100     0     0   100     0     0
                          0   200     0     0   200     0
                          0     0   300     0     0   300
                        100     0     0   100     0     0
                          0   200     0     0   200     0
                          0     0   300     0     0   300

                    repmat(someArray, 2, 3)
                        100     0     0   100     0     0   100     0     0
                          0   200     0     0   200     0     0   200     0
                          0     0   300     0     0   300     0     0   300
                        100     0     0   100     0     0   100     0     0
                          0   200     0     0   200     0     0   200     0
                          0     0   300     0     0   300     0     0   300

cat             Concatenate arrays along the specified dimension and return the result.

                e.g.
                    a               b
                        1   2           5     6
                        3   4           7     8

                    cat(1, a, b)
                        1   2
                        3   4
                        5   6
                        7   8

                    cat(2, a, b)
                        1   2   5   6
                        3   4   7   8

                    cat(3, a, b)
                        ans(:,:,1) =
                            1   2
                            3   4

                        ans(:,:,2) =
                            5   6
                            7   8

true            Return an array which all elements are logical 1 (true).

                e.g.
                    true
                        <logical>
                            1

                    true(3)
                        <logical>
                            1   1   1
                            1   1   1
                            1   1   1

                    true(4, 3)
                        <logical>
                            1   1   1
                            1   1   1
                            1   1   1
                            1   1   1

                    true(4, 3, 2)
                        <logical>
                            1   1   1
                            1   1   1
                            1   1   1
                            1   1   1

                            1   1   1
                            1   1   1
                            1   1   1
                            1   1   1

                    true([4 3])
                        <logical>
                            1   1   1
                            1   1   1
                            1   1   1
                            1   1   1

false           Return an array which all elements are logical 0 (false).

                e.g.
                    false
                        <logical>
                            0

                    false(3)
                        <logical>
                            0   0   0
                            0   0   0
                            0   0   0

                    false(4, 3)
                        <logical>
                            0   0   0
                            0   0   0
                            0   0   0
                            0   0   0

                    false(4, 3, 2)
                        <logical>
                            0   0   0
                            0   0   0
                            0   0   0
                            0   0   0

                            0   0   0
                            0   0   0
                            0   0   0
                            0   0   0

                    false([4 3])
                        <logical>
                            0   0   0
                            0   0   0
                            0   0   0
                            0   0   0

--------------------

diag            Create diagonal matrix or get diagonal elements of matrix
blkdiag         Construct block diagonal matrix from input arguments
horzcat         Concatenate arrays horizontally
vertcat         Concatenate arrays vertically

================================================================================
Matrices and Arrays - Create Grids
================================================================================
linspace / logspace / meshgrid
freqspace / ndgrid
Function        Brief
------------------------------------------------------------------------------------------------------------------------
linspace        Create a linearly spaced vector.
                This function is similar to the colon (:) operator, but gives direct control over the number of points and always includes the end point.
                This function generates linearly spaced values, and it has a sibling function "logspace", which generates logarithmically spaced values.

                e.g.
                    % Create a row vector of 100 evenly spaced points between 1 and 5.
                    linspace(1, 5)
                        1.0000  1.0404  1.0808 ... 4.9192  4.9596  5.0000

                    % Create a row vector of 8 evenly spaced points between 1 and 5.
                    linspace(1, 5, 8)
                        1.0000  1.5714  2.1429  2.7143  3.2857  3.8571  4.4286  5.0000

logspace        Create a logarithmically spaced vector.
                This function is especially useful for creating frequency vectors.
                This function is the logarithmic equivalent of the "linspace" function and the colon (:) operator.

                e.g.
                    % Create a row vector of 50 logarithmically spaced points between decades 10^1 and 10^5.
                    logspace(1, 5)
                        (1.0e+05 *)
                        0.0001  0.0001  0.0001  0.0002  0.0002  0.0003 ... 0.5690  0.6866  0.8286  1.0000

                    % Create a row vector of 8 logarithmically spaced points between decades 10^1 and 10^5.
                    logspace(1, 5, 8)
                        (1.0e+05 *)
                        0.0001  0.0004  0.0014  0.0052  0.0193  0.0720  0.2683  1.0000

meshgrid        Generate 2D/3D grids.

                e.g.
                    x = 1 : 3
                        1   2   3

                    y = 1 : 5
                        1   2   3   4   5

                    % Generate 2D grids coordinates per the coordinates contained in vectors "x" and "y".
                    % "xGrid" is a matrix where each row is a copy of the vector "x", and
                    % "yGrid" is a matrix where each column is a copy of the vector "y".
                    % The grid represented by the coordinates "xGrid" and "yGrid" has length("y") rows and length("x") columns.
                    [xGrid, yGrid] = meshgrid(x, y)
                        xGrid =
                             1     2     3
                             1     2     3
                             1     2     3
                             1     2     3
                             1     2     3

                        yGrid =
                             1     1     1
                             2     2     2
                             3     3     3
                             4     4     4
                             5     5     5


                e.g.
                    x = 0 : 2 : 6
                        0   2   4   6

                    y = 0 : 1 : 6
                        0   1   2   3   4   5   6


                    z = 0 : 3 : 6
                        0   3   6

                    [xGrid, yGrid, zGrid] = meshgrid(x, y, z)
                        ...

--------------------

freqspace       Frequency spacing for frequency response
ndgrid          Rectangular grid in N-D space

================================================================================
Matrices and Arrays - Determine Size and Shape
================================================================================
size / length / ndims / numel / isempty / isscalar / ismatrix / isvector / isrow / iscolumn
Function        Brief
------------------------------------------------------------------------------------------------------------------------
size            Returns an array which each element is the length of the corresponding dimension of the specified array.

                e.g.
                    size(rand(1, 3))
                        1   3

                    size(rand(4, 3))
                        4   3

                    size(rand(4, 3, 5))
                        4   3   5

                    [xLength, yLength] = size(rand(4, 3))
                        xLength = 4
                        yLength = 3

                    size(rand(4, 3, 5), 2)
                        3

length          Return the length of the largest array dimension.
                For vectors, the length is the number of elements; and for arrays, the length is max(size(x)).
                The length of an empty array is zero.

                e.g.
                    length(rand(1, 3))
                        3

                    length(rand(4, 3))
                        4

                    length(rand(4, 3, 5))
                        5

                    length([])
                        0

ndims           Return the number of array dimensions.
                The number of array dimensions is always greater than or equal to 2.

                e.g.
                    ndims(rand(1, 3))
                        2

                    ndims(rand(3, 1))
                        2

                    ndims(rand(4, 3))
                        2

                    ndims(rand(4, 3, 5))
                        3

numel           Return the number of array elements.

                e.g.
                    numel(rand(3))
                        9

                    numel(rand(4, 3))
                        12

                    numel(rand(1, 3))
                        3

                    numel(rand(3, 1))
                        3

                    numel(rand(4, 3, 5))
                        60

isempty         Return whether the input is empty.

                e.g.
                    isempty(0)
                        <logical>
                        0

                    isempty(1)
                        <logical>
                        0

                    isempty(rand(3, 4))
                        <logical>
                        0

                    data = rand(2, 3, 4);

                    isempty(data)
                        <logical>
                        0

                    data(:, :, :) = [];

                    isempty(data)
                        <logical>
                        1

                    isempty([])
                        <logical>
                        1

isscalar        Return whether the input is scalar.

                e.g.
                    data = rand(3, 4);

                    isscalar(data)
                        <logical>
                        0

                    isscalar(data(2, 3))
                        <logical>
                        1

ismatrix        Return whether the input is matrix.

                e.g.
                    ismatrix(123)
                        <logical>
                        1

                    ismatrix('abc')
                        <logical>
                        1

                    ismatrix(1:3)
                        <logical>
                        1

                    ismatrix((1:3)')
                        <logical>
                        1

                    ismatrix(rand(3, 4))
                        <logical>
                        1

                    ismatrix(true)
                        <logical>
                        1

isvector        Return whether the input is vector.

                e.g.
                    data = rand(3, 4);

                    isvector(data)
                        <logical>
                        0

                    isvector(data(2, :))
                        <logical>
                        1

                    isvector(data(:, 3))
                        <logical>
                        1

isrow           Return whether the input is row vector.

                e.g.
                    data = rand(3, 4);

                    isrow(data)
                        <logical>
                        0

                    isrow(data(2, :))
                        <logical>
                        1

                    isrow(data(:, 3))
                        <logical>
                        0

iscolumn        Return whether the input is column vector.

                e.g.
                    data = rand(3, 4);

                    iscolumn(data)
                        <logical>
                        0

                    iscolumn(data(2, :))
                        <logical>
                        0

                    iscolumn(data(:, 3))
                        <logical>
                        1

================================================================================
Matrices and Arrays - Reshape and Rearrange
================================================================================
sort / sortrows / issorted / flip / fliplr / flipud / rot90 / transpose / ctranspose / permute / ipermute / circshift / shiftdim / reshape / squeeze
Function        Brief
------------------------------------------------------------------------------------------------------------------------
sort            Sort the array elements and return the result.

                e.g.
                    sort(5:-1:1)
                        1   2   3   4   5

                    sort((5:-1:1)')
                        1
                        2
                        3
                        4
                        5

                    data = [3 6 9; 2 5 8; 1 4 7]
                        3   6   9
                        2   5   8
                        1   4   7

                    sort(data)
                        1   4   7
                        2   5   8
                        3   6   9

                    data = rand(4, 3, 2)
                        data(:, :, 1) =
                            0.3502  0.8329  0.5407
                            0.6620  0.2564  0.8699
                            0.4162  0.6135  0.2648
                            0.8419  0.5822  0.3181

                        data(:, :, 2) =
                            0.1192  0.6393  0.7210
                            0.9398  0.5447  0.5225
                            0.6456  0.6473  0.9937
                            0.4795  0.5439  0.2187

                    sort(data)
                        ans(:, :, 1) =
                            0.3502  0.2564  0.2648
                            0.4162  0.5822  0.3181
                            0.6620  0.6135  0.5407
                            0.8419  0.8329  0.8699

                        ans(:, :, 2) =
                            0.1192  0.5439  0.2187
                            0.4795  0.5447  0.5225
                            0.6456  0.6393  0.7210
                            0.9398  0.6473  0.9937

                    sort(['c' 'b' 'a'])
                        'abc'

                    sort(['c' 'b' 'a']')
                        'a'
                        'b'
                        'a'

                    data = [9 6 3; 8 5 2; 7 4 1]
                        9   6   3
                        8   5   2
                        7   4   1

                    sort(data)
                        7   4   1
                        8   5   2
                        9   6   3

                    sort(data, 1)
                        7   4   1
                        8   5   2
                        9   6   3

                    sort(data, 2)
                        3   6   9
                        2   5   8
                        1   4   7

                    sort(1:5, 'descend')
                        5   4   3   2   1

sortrows        Sort rows of an array/table/timetable and return the result.

                e.g.
                    data = [3   3   2   5; 3   1   7   4; 2   6   5   8; 3   1   7   2; 9   4   1   3; 6   7   2   9]
                        3   3   2   5
                        3   1   7   4
                        2   6   5   8
                        3   1   7   2
                        9   4   1   3
                        6   7   2   9

                    sortrows(data)
                        2   6   5   8
                        3   1   7   2
                        3   1   7   4
                        3   3   2   5
                        6   7   2   9
                        9   4   1   3

issorted        Determine whether an array is sorted.

                e.g. Test scalars.
                    issorted(3)
                        <logical>
                        1

                    issorted('a')
                        <logical>
                        1

                    issorted(false)
                        <logical>
                        1

                e.g. Test vectors.
                    issorted(1:5)
                        <logical>
                        1

                    issorted(5:-1:1)
                        <logical>
                        0

                    issorted((1:5)')
                        <logical>
                        1

                    issorted((5:-1:1)')
                        <logical>
                        0

                    issorted([1 1 1 1 1])
                        <logical>
                        1

                    issorted('a':'e')
                    Note: The command "'a':'e'" returns 'abcde'.
                        <logical>
                        1

                    issorted('e':-1:'a')
                    Note: The command "'e':-1:'a'" returns 'edcba'.
                        <logical>
                        0

                e.g. Test arrays.
                    data = [1 4 7; 3 6 9; 2 5 8]
                        1   4   7
                        3   6   9
                        2   5   8

                    issorted(data)
                        <Error: Input must be a vector or 'rows' must be specified.>

                    issorted(data(1, :))
                        <logical>
                        1

                    issorted(data(:, 1))
                        <logical>
                        0

                    issorted(data, 'rows')
                        <logical>
                        0

                    sortrows(data)
                        1   4   7
                        2   5   8
                        3   6   9

                    issorted(sortrows(data), 'rows')
                        <logical>
                        1

                    ------------------------------------------------------------

                    data = [string('a') string('b') string('c'); string('g') string('h') string('i'); string('d') string('e') string('f')]
                        <3x3 string array>
                        "a"    "b"    "c"
                        "g"    "h"    "i"
                        "d"    "e"    "f"

                    issorted(data)
                        <logical>
                        0

                    data'
                        <3x3 string array>
                        "a"    "g"    "d"
                        "b"    "h"    "e"
                        "c"    "i"    "f"

                    issorted(data')
                        <logical>
                        1

                    issorted(data, 1)
                        <logical>
                        0

                    issorted(data, 2)
                        <logical>
                        1

                    flippedData = flip(data, 2)
                        <3x3 string array>
                        "c"    "b"    "a"
                        "i"    "h"    "g"
                        "f"    "e"    "d"

                    issorted(flippedData, 2)
                    issorted(flippedData, 2, 'ascend')
                        <logical>
                        0

                    issorted(flippedData, 2, 'descend')
                        <logical>
                        1

                    ------------------------------------------------------------

                    issorted('')
                        <logical>
                        1

flip            Flip the array and return the result.

                e.g.
                    flip([3 1 4])
                        4   1   3

                    flip([3 1 4]')
                        4
                        1
                        3

                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    flip(data)
                    flip(data, 1)
                        7   8   9
                        4   5   6
                        1   2   3

                    flip(data, 2)
                        3   2   1
                        6   5   4
                        9   8   7

fliplr          Flip the array in the left-right direction and return the result.

                e.g.
                    fliplr([3 1 4])
                        4   1   3

                    fliplr([3 1 4]')
                        3
                        1
                        4

                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    fliplr(data)
                        3   2   1
                        6   5   4
                        9   8   7

flipud          Flip the array in the up-down direction and return the result.

                e.g.
                    flipud([3 1 4])
                        3   1   4

                    flipud([3 1 4]')
                        4
                        1
                        3

                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    flipud(data)
                        7   8   9
                        4   5   6
                        1   2   3

rot90           Rotate the array 90 degrees and return the result.
                Note: The rotatation is performed counterclockwise.

                e.g.
                    rot90([3 1 4])
                        4
                        1
                        3

                    rot90([3 1 4]')
                        3   1   4

                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    rot90(data)
                        3   6   9
                        2   5   8
                        1   4   7

                    rot90([3 1 4], 2)
                        4   1   3

                    rot90(data, 2)
                        9   8   7
                        6   5   4
                        3   2   1

transpose       Transpose the vector/matrix and return the result.
                Simply speaking, this function interchanges the row index and column index for each array element.
                Note: This function is an alternative to the transpose operator (.').

                e.g.
                    transpose([3 1 4])
                        3
                        1
                        4

                    transpose([3 1 4]')
                        3   1   4

                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    transpose(data)
                        1   4   7
                        2   5   8
                        3   6   9

                    data.'
                        1   4   7
                        2   5   8
                        3   6   9

ctranspose      Perform a complex conjugate transpose on the vector/matrix and return the result.
                Simply speaking, this function interchanges the row index and column index for each array element.
                Note: This function is an alternative to the transpose operator (').

                e.g.
                    ctranspose([3 1 4])
                        3
                        1
                        4

                    ctranspose([3 1 4]')
                        3   1   4

                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    ctranspose(data)
                        1   4   7
                        2   5   8
                        3   6   9

                    data'
                        1   4   7
                        2   5   8
                        3   6   9

permute         Rearrange the array dimensions and return the result.
                Note: All the elements of the order array (this function's 2nd argument) must be unique, real, positive and integer values.

                e.g.
                    data = [1 2; 3 4]
                        1   2
                        3   4

                    % Rearrange the array dimensions by changing the dimension order from 1 2 to 2 1.
                    permute(data, [2 1])
                        1   3
                        2   4

                e.g.
                    data1 = rand(2, 3, 4);
                    size(data1)
                        2   3   4

                    % Rearrange the array dimensions by changing the dimension order from 1 2 3 to 2 3 1.
                    data2 = permute(data1, [2 3 1]);
                    size(data2)
                        3   4   2

ipermute        Return the inverse array which dimensions have been rearranged.

                e.g.
                    data = [1 2; 3 4]
                        1   2
                        3   4

                    % Return the inverse array which dimensions have been rearranged from 1 2 to 2 1.
                    ipermute(data, [2 1])
                        1   3
                        2   4

                e.g.
                    data1 = rand(2, 3, 4);
                    size(data1)
                        2   3   4

                    % Return the inverse array which dimensions have been rearranged from 1 2 3 to 2 3 1.
                    data2 = ipermute(data1, [2 3 1]);
                    size(data2)
                        4   2   3

circshift       Shift the array circularly and return the result.

                e.g.
                    data = 1:5
                        1   2   3   4   5

                    circshift(data, 2)
                        4   5   1   2   3

                e.g.
                    data = (1:5)'
                        1
                        2
                        3
                        4
                        5

                    circshift(data, 2)
                        4
                        5
                        1
                        2
                        3

                e.g.
                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    circshift(data, [2])
                        4   5   6
                        7   8   9
                        1   2   3

                    circshift(data, [2, 1])
                        6   4   5
                        9   7   8
                        3   1   2

shiftdim        Shift the array dimensions and return the result.

                e.g.
                    data1 = rand(2, 3, 4);
                    size(data1)
                        2   3   4

                    data2 = shiftdim(data1, 2);
                    size(data2)
                        4   2   3

reshape         Reshape the array and return the result.

                e.g.
                    data = 1:10
                        1   2   3   4   5   6   7   8   9   10

                    % Reshape the array from a 1x10 row vector to a 5x2 matrix.
                    reshape(data, [5 2])
                        1   6
                        2   7
                        3   8
                        4   9
                        5  10

                e.g.
                    data = zeros(4, 3, 2)
                        data(:, :, 1) =
                            0   0   0
                            0   0   0
                            0   0   0
                            0   0   0

                        data(:, :, 2) =
                            0   0   0
                            0   0   0
                            0   0   0
                            0   0   0

                    reshape(data, 6, 4)
                        0   0   0   0
                        0   0   0   0
                        0   0   0   0
                        0   0   0   0
                        0   0   0   0
                        0   0   0   0


squeeze         Remove all singleton array dimensions and return the result.
                The scalars, vectors and 2D arrays are not affected by this function.

                e.g.
                    data = rand(1, 3, 2)
                        data(:, :, 1) =
                            0.4843  0.8449  0.2094

                        data(:, :, 2) =
                            0.5523  0.6299  0.0320

                    squeeze(data)
                            0.4843  0.5523
                            0.8449  0.6299
                            0.2094  0.0320

                e.g.
                    data = rand(3, 1, 2)
                        data(:, :, 1) =
                            0.6147
                            0.3624
                            0.0495

                        data(:, :, 2) =
                            0.4896
                            0.1925
                            0.1231

                    squeeze(data)
                            0.6147  0.4896
                            0.3624  0.1925
                            0.0495  0.1231

                e.g.
                    squeeze(1)
                        1

                    squeeze(1:3)
                        1   2   3

                    squeeze((1:3)')
                        1
                        2
                        3

                    squeeze([1 2 3; 4 5 6; 7 8 9])
                        1   2   3
                        4   5   6
                        7   8   9

================================================================================
Matrices and Arrays - Control Indexing
================================================================================
colon / end / ind2sub / sub2ind
Function        Brief
------------------------------------------------------------------------------------------------------------------------
colon           Create vectors, array subscripting, and for-loop iterators.

                e.g.
                    1 : 2 : 9
                        1   3   5   7   9

                    1 : 4
                        1   2   3   4

                    2 : 0.5 : 5
                        2.0000  2.5000  3.0000  3.5000  4.0000  4.5000  5.0000

                    6 : -1 : 1
                        6   5   4   3   2   1

                e.g.
                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    data(2, :)
                        4   5   6


                    data(:, 3)
                        3
                        6
                        9

                    data(1 : 2, 2 : 3)
                        2   3
                        5   6

                    data(:)
                        1
                        4
                        7
                        2
                        5
                        8
                        3
                        6
                        9

                e.g.
                    for data = 1 : 3
                        disp(data)
                    end
                        1
                        2
                        3

                    for data = 'a' : 'd'
                        disp(data)
                    end
                        a
                        b
                        c
                        d

end             Terminate a block of code, or indicate the last array element index.

                e.g.
                    if rand > 0.5
                        disp('The generated random number is greater than 0.5.')
                    else
                        disp('The generated random number is equal to or less than 0.5.')
                    end

                    for data = 1 : 3
                        disp(data)
                    end

                e.g.
                    data = [1 2 3; 4 5 6; 7 8 9]
                        1   2   3
                        4   5   6
                        7   8   9

                    data(1, end)
                        3

                    data(2 : end, end - 1)
                        5
                        8

ind2sub         Compute the subscripts from the linear indexes and return the result.

                e.g.
                    linearIndexes = [2 3 5 9];

                    arraySize = [3 3];
                        MC: [3 3] indicates the following array will be used in the computation.
                        ----------------
                        1   4   7
                        2   5   8
                        3   6   9
                        ----------------
                        MC: and the array's corresponding subscripts are as follows.
                        ------------------------------------
                        1, 1    1, 2    1, 3
                        2, 1    2, 2    2, 3
                        3, 1    3, 2    3, 3
                        ------------------------------------

                    [subscripts1, subscripts2] = ind2sub(arraySize, linearIndexes)
                        subscripts1
                            2   3   2   3

                        subscripts2
                            1   1   2   3

sub2ind         Compute the linear indexes from the subscripts and return the result.

                e.g.
                    subscripts1 = [2 3 2 3];
                    subscripts2 = [1 1 2 3];

                    arraySize = [3 3];
                        MC: [3 3] indicates the following array will be used in the computation.
                        ----------------
                        1   4   7
                        2   5   8
                        3   6   9
                        ----------------
                        MC: and the array's corresponding subscripts are as follows.
                        ------------------------------------
                        1, 1    1, 2    1, 3
                        2, 1    2, 2    2, 3
                        3, 1    3, 2    3, 3
                        ------------------------------------

                    linearIndexes = sub2ind(arraySize, subscripts1, subscripts2)
                        2   3   5   9

------------------------------------------------------------------------------------------------------------------------
ver             Display information for MathWorks products.

                e.g.
                    ver

openExample     Open an example.
                An argument should be provided to specify the example's location under the "examples" folder of the MATLAB installation.

                Syntax
                    openExample(exampleLocation)

                Example
                    openExample('matlab/LinePlotsGSExample')    MC: An example named "LinePlotsGSExample" will be searched at the location
                                                                    "{MATLAB Installation}/examples/matlab" and then be opened.

========================================
Code Snippets
========================================
============================================================

============================================================

========================================
Toolbox - Psychtoolbox
========================================
Overview
Information for Beginners
Misc
    Updating Psychtoolbox
Study Notes

============================================================
Overview
============================================================
- Psychtoolbox is a set of MATLAB and GNU Octave functions for vision research.
  It provides exquisite control of the computer to test observers with research-grade dynamic stimuli.
- Psychtoolbox interfaces between MATLAB/Octave and the computer hardware.
- Psychtoolbox is free.
- By far (2017/02), Psychophysics Toolbox Version 3 (PTB-3) is the latest version of Psychtoolbox, while Psychophysics Toolbox Version 2 (PTB-2) becomes deprecated.
- PTB is an abbreviation of PsychToolBox.
- PTB-3 is based on PTB-2, with its Matlab C extensions rewritten to be more modular and to use OpenGL on the back end.
- It is strongly recommended to run Psychtoolbox on a GNU Linux machine,
  because running Psychtoolbox on other machines (such as Apple Mac OS X and Microsoft Windows)
  causes much less support from the developers, and may have restrictions in functionality, reliability, performance and precision for some features.
- System requirements of PTB-3 are listed at the following location.
  http://psychtoolbox.org/requirements/

- To use Psychtoolbox, there are 3 things to learn, as follows.
  - MATLAB
  - How to create stimuli and measure responses
  - How to organize an experiment
  Note: For details, see PsychDemos or type "help PsychDemos" in MATLAB after Psychtoolbox's installation.
- By default, Psychtoolbox provides beta branches, which contain the latest features, performance enhancements and bug fixes.
- Executing the command "PsychtoolboxVersion" returns Psychtoolbox's version information (version number, flavor and revision number).

============================================================
Information for Beginners
============================================================
- Try the command "help Psychtoolbox".  (to list all the categories of functions in Psychtoolbox)
- Try the command "help PsychDemos".    (to list all the demos in Psychtoolbox)
- Try the command "help PsychBasic".    (to list all functions in PsychBasic)

- Be sure to read the document "{Psychtoolbox Home}/Psychtoolbox/PsychDocumentation/Psychtoolbox3-Slides.pdf"
  for an overview of differences between PTB-3 and PTB-2, and proper use of basic features.
- Be sure to read other documents in the folder "{Psychtoolbox Home}/Psychtoolbox/PsychDocumentation".
  The following information is included.
  - Technical implementation details
  - How to solve specific tasks
  - How to troubleshoot common problems
- Be sure to get familiar with demos in the folder "{Psychtoolbox Home}/PsychDemos".
  Those demos show best practices for many common tasks and are generally well documented.
- A large set of nice and beginner friendly Psychtoolbox tutorial scripts written by Peter Scarfe
  can be found at http://peterscarfe.com/ptbtutorials.html.

- In Psychtoolbox's documentation, optional function arguments are embraced with square brackets.
- The most important and generally useful functions (especially Screen), are in PsychBasic.

- To acknowledge use of Psychtoolbox when publishing the research,
  say something in the research like follows.
  ------------------------------------------------------------------------------
  I wrote the experiments in Matlab, using the Psychophysics Toolbox extensions ...
  ------------------------------------------------------------------------------

============================================================
Misc
============================================================
Updating Psychtoolbox

Updating Psychtoolbox
    To update Psychtoolbox to the latest version, use the following MATLAB command.
        UpdatePsychtoolbox

============================================================
Study Notes
============================================================
Contents
Demos

Legends
--------------------
!   Important/Helpful
~   Viewed/Watched

Contents
    Here are Psychtoolbox folders and their contents.
    <from the command "help Psychtoolbox">
    Folder                      Description                                                     Description (Chinese)
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    PsychAlpha                  - Under development. Experimental, risky, undocumented.         OpenGL阿尔法通道用函数（开发中、属于试验性的、使用上有风险、未提供文档）。
    PsychAlphaBlending          - OpenGL alpha-channel blending utilities and constants.        OpenGL阿尔法通道混合用的实用程序和常量。
!   PsychBasic                  - Basic support routines for psychophysics.                     基本的支持函数。
    PsychCal                    - Calibrate your video monitors.                                用于校准视频监视器的函数。
    PsychCalDemoData            - Demo calibration data.                                        校准数据的演示。
    PsychColorimetric           - Colorimetric calculations.                                    用于比色计算的函数。
    PsychColorimetricData       - Standard colorimetric data.                                   标准的比色数据。
    PsychContributed            - Contributed programs.                                         （第三方）贡献的程序。
!   PsychDemos                  - Show how to use the Psychtoolbox.                             如何使用Psychtoolbox的演示。
!   PsychDocumentation          - Documentation about specific topics.                          特定主题的文档。
    PsychFiles                  - Process text files.                                           用于处理文本文件的函数。
    PsychGamma                  - Fit monitor gamma functions.                                  用于安装监视器伽玛功能的函数。
    PsychGLImageProcessing      - Built-in image processing via graphics hardware.              内建的通过图形硬件进行图形处理的函数。
    PsychGPGPU                  - General purpose accelerated computing on GPUs.                用于图形处理器通用计算的函数。
    PsychHardware               - Interface to plug-in hardware.                                插件式硬件的接口函数。
    PsychInitialize             - Initialize and deinitialize MATLAB                            用于初始化和反初始化MATLAB的函数。
    PsychMatlabTests            - Document the few bugs in Matlab 5.2.1.                        关于MATLAB 5.2.1的一些代码错误的记载。
    PsychObsolete               - Obsolete routines, still present for compatibility.           废弃的函数（但为了兼容性还是保留了）。
    PsychOpenGL                 - Routines for low-level access to OpenGL 3D graphics.          用于OpenGL 3D图形的底层访问的函数。
    Psychometric                - Psychometric function fitting.                                用于安装心理测量功能的函数。
    PsychOneliners              - Trivial, but handy, functions.                                不重要但是便利的函数。
    PsychOptics                 - Optics calculations, mostly for human optics.                 用于光学计算（主要是人体光学）的函数。
    PsychPriority               - Priority and Rush.  (formerly within PsychBasic)              用于控制程序运行的优先级别的函数。（之前放置在PsychBasic目录下）
    PsychProbability            - Probability and statistics.                                   用于进行概率和统计运算的函数。
    PsychRadiometric            - Radiometric/photometric calculations and conversions.         用于进行辐射测量和光度测量的计算和转换的函数。
!   PsychRects                  - Manipulate rectangles for drawing.                            用于操作矩形进行图形绘制的函数。
    PsychSignal                 - Signal processing and math routines.                          用于信号处理和数学的函数。
    PsychStairCase              - Adaptive staircase procedure.                                 自适应的阶梯程序。
    PsychTests                  - Evaluate performance of software and hardware.                用于评估软硬件性能的函数。
    PsychVideoCapture           - Functions for realtime video capture.                         用于实时视频捕捉的函数。
    Quest                       - Threshold estimation procedure.                               用于阈值估计的函数。
                                                                                                注：
                                                                                                - OpenGL (Open Graphics Library, 开放图形库), 是一个用于绘制2D/3D图形的、跨编程语言、跨平台的 API (应用程序编程接口)。
                                                                                                - GPU (Graphics Processing Unit, 图形处理器), 是一种专门进行绘图运算工作的微处理器。
                                                                                                - GPGPU (General-purpose Computing on Graphics Processing Units, 图形处理器通用计算),
                                                                                                  指的是使用GPU进行应用程序中的、传统上由CPU进行的计算。
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Demos
    Here are demos of Psychtoolbox (located in the PsychDemos folder).
    <from the command "help PsychDemos">
    Demo                        Description                                                     Description (Chinese)
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
!~  PsychExampleExperiments     - Subfolder with real experiment scripts for different tasks, contributed by users.
                                                                                                由用户提供的、使用在不同任务中的、真实的实验脚本。
~       MinimumMotionExp        - Contains "Minimum motion luminance measurement" procedure, workable on both a standard display and the CRS Bits++ system.
                                                                                                包含“最小运动亮度测量”程序，在标准显示和CRS Bits++系统上都能运行。
                                                                                                MC: 可能会显示一个逆时针旋转的圆形，其圆心处有一个黑色小方块。
!~      MullerLyerIllusion      - Demonstration of MullerLyerIllusion, packed into a nice complete experiment.
                                                                                                关于“穆勒莱尔错觉”的演示（已经包装成一个很好且完整的实验）。
                                                                                                MC: 会显示一些线条组成的图形，并要求用户按键来判断图形是否等长。
!~      OldNewRecognition       - Subfolder contains simple old-/new- recognition experiment.   【子目录】包含简单的新旧识别实验。
                                                                                                MC: 会首先显示一些图片，其后显示更多的图片，用户需要按键来判断哪些图片之前显示过。

    AlphaImageDemo              - Simple demo of OpenGL alpha blending.                         【子目录】关于OpenGL阿尔法混合的简单演示。
    AlphaRotateDemo             - A variant of AlphaImageDemoOSX, demonstrates rotated drawing. 关于绘图旋转的演示（本演示是“AlphaImageDemo”演示的变体）。
    ArcDemo                     - Demonstrate the 'FrameArc', 'FillArc' functions.              关于“FrameArc”和“FillArc”功能（这2个功能都是有关弧的绘制）的演示。
    AudioTunnel3DDemo           - Very sketchy demo on how to use OpenAL for 3D spatialized sound.
                                                                                                关于使用OpenAL产生三维空间化声音的非常粗略的演示（1）。
    AudioTunnel3DDemo2          - Another sketchy demo on how to use OpenAL for 3D spatialized sound.
                                                                                                关于使用OpenAL产生三维空间化声音的非常粗略的演示（2）。
    BasicAMAndMixScheduleDemo   - Demonstrates basic use of sound schedules, volume controls, amplitude modulation and audio mixing of multiple voices.
                                                                                                关于声音计划、音量控制、振幅调制（调幅）、多个语音的音频混合的基本用法的演示。
    BasicSoundFeedbackDemo      - Demonstrates a audio feedback loop via PsychPortAudio(). See DelayedSoundFeedbackDemo for a more research grade approach.
                                                                                                关于通过PsychPortAudio函数产生一个音频反馈回路的演示。参照“DelayedSoundFeedbackDemo”演示来了解一个更具研究级别的方案。
    BasicSoundInputDemo         - Demonstrate basic usage of PsychPortAudio() for sound capture.
                                                                                                关于使用PsychPortAudio函数捕捉声音的基本用法的演示。
    BasicSoundOutputDemo        - Demonstrate basic usage of PsychPortAudio() for sound playback.
                                                                                                关于使用PsychPortAudio函数回放声音的基本用法的演示。
    BasicSoundScheduleDemo      - Demonstrate basic usage of sound schedules and buffers with PsychPortAudio().
                                                                                                关于使用PsychPortAudio函数处理声音计划和缓冲的演示。
    BlurredMipmapDemo           - Apply blurring via OpenGL mip-mapping to live video or movies.
                                                                                                关于对直播视频或影片进行模糊化处理（通过OpenGL mip-mapping）的演示。
    BlurredVideoCaptureDemo     - Demonstrate application of GPU accelerated image filters to live video.
                                                                                                关于在直播视频上应用GPU加速图像过滤器的演示。
    BubbleDemo                  - Like GazeContingentDemoOSX, but with multiple apertures.      本演示和“GazeContingentDemo”演示一样，除了有多个孔径／光圈。
    CalDemo                     - Demonstrate use of calibration structure and associated routines.
                                                                                                关于使用校准结构和关联函数的演示。
    ClutAnimDemo                - Demonstrate lookup table animation.                           关于颜色查找表动画的演示。
    ContrastModulatedNoiseTheClumsyStyleDemo
                                - Demonstrate creation of contrast modulated noise. Clumsy and inefficient, but works on old hardware.
                                                                                                关于创建对比调制噪声的演示（该方式笨拙且低效，但在老的硬件上能生效）。
    ContrastModulatedNoiseTheElegantStyleDemo
                                - Demonstrate creation of contrast modulated noise. Elegant and efficient, but needs recent hardware.
                                                                                                关于创建对比调制噪声的演示（该方式优雅且高效，但只在较新的硬件上生效）。
    DatarecordingFromISCANDemo  - Template for asynchronous data collection and timestamping of gaze samples from ISCAN eye tracker.
                                                                                                关于异步数据采集和注视样本（来自ISCAN眼动仪）时间戳的模板的演示。
    DatarecordingFromSerialPortDemo
                                - Template for asynchronous data collection and timestamping from serial port.
                                                                                                关于异步数据采集和样本（来自串行端口）时间戳的模板的演示。
    DelayedSoundFeedbackDemo    - Demonstrates a audio feedback loop via PsychPortAudio() with exactly controlled latency.
                                                                                                关于通过PsychPortAudio函数产生一个音频反馈回路（有精确控制的延迟）的演示。
    DotDemo                     - Animate dots with Screen('DrawDots).                          关于使用“Screen('DrawDots)”命令在屏幕上绘制点的演示。
    DKLDemo                     - Demonstrate DKL color space.                                  关于DKL颜色空间的演示。
    DrawFormattedTextDemo       - Demonstrate formatted text drawing via DrawFormattedText().   关于通过DrawFormattedText函数绘制格式化文本的演示。
    DrawHighQualityUnicodeTextDemo
                                - Demonstrate drawing of high quality, anti-aliased and Unicode text.
                                                                                                关于绘制优质、抗锯齿和Unicode的文本的演示。
    DrawManuallyAntiAliasedTextDemo
                                - Manually anti-alias text for special purpose applications.    关于为具有特殊用途的应用程序手动绘制抗锯齿文本的演示。
    DrawMirroredTextDemo        - Shows how to draw horizontally mirrored text.                 关于绘制横向镜像的文本的演示。
    DrawSomeTextDemo            - Very simple example of using 'DrawText'.                      关于使用DrawText函数的极简单例子的演示。
!~  DriftDemo                   - Animation of grating using textures.                          关于使用纹理创建光栅动画的演示。
                                                                                                MC: 会显示一个不断移动的斜向光栅。
!~  DriftDemo2                  - More efficient animation of gratings using one texture.       关于使用纹理创建更高效的光栅动画的演示。
                                                                                                MC: 会显示一个不断移动的斜向光栅（速率较慢）。
!~  DriftDemo3                  - Even more efficient animation of gratings under some constraints.
                                                                                                关于在某些限制下创建更更高效的光栅动画的演示。
                                                                                                MC: 会显示一个不断移动的竖向光栅（速率较慢）。
!~  DriftDemo4                  - Very efficient animation of gratings on graphics hardware with shader support.
                                                                                                关于在有着色器支持的图形硬件上创建非常高效的光栅动画的演示。
                                                                                                MC: 会显示一个不断移动的竖向光栅（光栅非常粗）。
!~  DriftDemo5                  - Animation of dual-gratings via use of alpha blending and color masking.
                                                                                                关于使用阿尔法混合和颜色遮蔽创建双光栅动画的演示。
                                                                                                MC: 会显示内外2个圆形，外圆和内圆之间显示不断移动的斜向光栅（速率较慢），内圆内显示不断移动的横向光栅（速率较慢）。
!~  DriftDemo6                  - Very efficient animation of dual-gratings on graphics hardware with shader support.
                                                                                                关于在有着色器支持的图形硬件上创建非常高效的双光栅动画的演示。
                                                                                                MC: 会显示内外2个圆形，外圆和内圆之间显示不断移动的斜向光栅（速率较慢），内圆内也显示不断移动的斜向光栅（速率较慢）。
    DriftWaitDemo               - Show how to optimally time animations.                        关于用最佳方式设置动画等待的演示。
    ErrorCatchDemo              - How to handle errors gracefully (try/catch).                  关于优雅地处理错误（使用try/catch语句块）的演示。
    ExpandingRingsDemo          - Shows how GLSL procedural textures can be used to create some expanding rings stimulus.
                                                                                                关于使用GLSL程序纹理创建膨胀环刺激的演示。
    FastNoiseDemo               - Demo and benchmark on how to quickly draw noise stimuli.      关于快速绘制噪音刺激的演示和基准 。
    FastMaskedNoiseDemo         - Like FastNoiseDemo, but the noise patch is drawn through an aperture to demonstrate fast masking.
                                                                                                本演示类似“FastNoiseDemo”演示，但其噪音片段是通过一个孔径来绘制的，借以演示快速遮蔽的特性。
    FitGammaDemo                - Demonstrate gamma fitting routine FitGamma.                   关于伽玛安装程序“FitGamma”的演示。
    FontDemo                    - How to check for font availability and set font.              关于检测字体可用性和设置字体的演示。
    GarboriumDemo               - Demonstrate superimposed drawing of many Gabors by use of alpha-blending, 'DrawTextures' batch drawing and PTB imaging pipeline.
                                                                                                关于使用阿尔法混合、DrawTextures选项（用于Screen函数）的批处理绘制和PTB成像管道来叠加绘制许多加博尔的演示。
    GazeContingentDemo          - Implementation of a simple gaze contingent display.           关于实现一个简单的注视指定显示的演示。
    GLSLCLUTAnimDemo            - Demonstrates use of function moglClutBlit to perform CLUT animation with GLSL in an OS independent way.
                                                                                                关于使用“moglClutBlit”函数和GLSL，以独立于操作系统的方式，表演颜色查找表动画的演示。
    GPGPUDemos                  - Demos for use of GPGPU computing with Psychtoolbox.           【子目录】关于使用GPGPU计算的多个演示。
!~  GratingDemo                 - Basic display of a grating on the screen.                     关于一个光栅在屏幕上的基本显示的演示。
                                                                                                MC: 会显示一个静止的斜向光栅。
    IsomerizationsInDishDemo    - Compute photoreceptor isomerizations for retina in a dish.    关于计算鱼视网膜的感光器异构化的演示。
    IsomerizationsInEyeDemo     - Compute photoreceptor isomerizations for human eye.           关于计算人类眼睛的感光器异构化的演示。
!   KbDemo                      - Demonstrate KbCheck, KbName, KbWait.                          关于KbCheck、KbName和KbWait函数（这几个函数都是底层的、用来处理键盘信息的函数）的演示。
    KinectDemo                  - Capture and display video and depths data from a Kinect box.  关于通过Kinect捕捉以及显示视频和深度数据的演示。
    Kinect3DDemo                - Capture data from a Kinect box and view it as a textured 3D point-cloud or mesh.
                                                                                                关于通过Kinect捕捉数据并将数据作为有纹理的三维点云或网格来查看的演示。
    LineStippleDemo             - Draw dotted and dashed lines.                                 关于绘制点线和虚线的演示。
    MandelbrotDemo              - Visualize the Mandelbrot fractal set by use of a GLSL procedural texture.
                                                                                                关于使用GLSL程序纹理具现曼德博分形集合的演示。
    MouseTraceDemo              - Track mouse around screen and draw contour.                   关于追踪屏幕上的鼠标来画线的演示。
    MouseTraceDemo2             - More efficient tracking of mouse around screen drawing contour.
                                                                                                关于更高效地追踪屏幕上的鼠标来画线的演示。
    MouseTraceDemo3             - Like MouseTraceDemo2, but faster, and for multiple mice.      本演示类似“MouseTraceDemo2”演示，但是更快，并且支持多个鼠标。
    MouseTraceDemo4             - Like MouseTraceDemo2, but faster on modern hardware.          本演示类似“MouseTraceDemo2”演示，但是在现今的硬件上会更快。
    MovieDemo                   - Animation without offscreen windows.                          关于没有画面外窗口的动画的演示。
    MovieDemos                  - Subfolder: Demos on how to use movie playback.                【子目录】关于使用影片回放功能的多个演示。
    MovingLineDemo              - Shows some horizontally moving lines to demonstrate flat panel display artifacts.
                                                                                                关于通过水平移动的线条来展现平板显示电波的演示。
    NomogramDemo                - Compute photoreceptor nomograms.                              关于计算感光器列线图的演示。
    OldNewRecogExp              - A full old-new recognition experiment.                        关于一个完整的新旧识别实验的演示。
    OpenGL4MatlabDemos          - Subfolder: Demos on how to use MOGL OpenGL functions.         【子目录】关于使用MOGL OpenGL函数的多个演示。
    PanelFitterDemo             - Demonstrate use of the builtin panel fitter.                  关于内建的面板安装器的使用的演示。
    ProceduralGaborDemo         - Demo for fast drawing of Gabors via procedural textures.      关于通过程序纹理快速绘制加博尔的演示。
    ProceduralGarboriumDemo     - Same as GarboriumDemo, just with procedural gabor drawing.    本演示和“GarboriumDemo”演示一样，只是有程序的加博尔绘图。
    ProceduralNoiseDemo         - Demo for fast drawing of noise patches via procedural texturing.
                                                                                                关于通过程序纹理快速绘制噪音片段的演示。
    PsychRTBoxDemo              - Demonstrates basic use of the RTBox reaction time button response box.
                                                                                                关于RTBox反应时间盒的基本用法的演示。
    RaspberryPiGPIODemo         - Show basic use of GPIO's on a RaspberryPi running Raspian GNU/Linux.
                                                                                                关于（运行Raspian GNU/Linux操作系统的树莓派电脑中的）GPIO板针的基本用法的演示。
    ReceivingTriggerFromSerialPortDemo
                                - Template for asynchronous trigger collection and timestamping from serial port.
                                                                                                关于异步触发器采集和样本（来自串行端口）时间戳的模板的演示。
    RenderDemo                  - Render CIE xyY as a color patch.                              关于把CIE xyY颜色空间渲染成颜色片段的演示。
    SadowskiDemo                - Shows the "Sadowski" color afterimage effect.                 关于萨多夫斯基颜色残像效果的演示。
    SimpleImageMixingDemo       - Shows how to mix two images via alpha-blending, using an alpha-mask which itself is morphed between two masks.
                                  See also ImageMixingTutorial for a more complex demonstration of the technique.
                                                                                                关于通过阿尔法混合来混合2个图像（使用了阿尔法遮蔽，其在两个遮蔽间被变形）的演示。
    SimpleSoundScheduleDemo     - Simple demo for basic use of sound schedules with PsychPortAudio.
                                                                                                关于使用了PsychPortAudio函数的声音计划的基本用法的简单演示。
    SimpleVoiceTriggerDemo      - demo of a simple voice trigger with PsychPortAudio.           关于一个使用了PsychPortAudio函数的简单的语音触发器的演示。
    SpriteDemo                  - Animates an image that follows the mouse.                     关于一张跟随鼠标移动的图像的演示。
    StereoDemo                  - Drive stereo-displays e.g., CrystalEyes.                      关于驱动立体显示（如：晶体眼）的演示。
    StereoViewer                - A simple viewer for stereo image pairs.                       关于一个简单的立体图像对查看器的演示。
    TurnTableDemo               - Nurture your inner DJ! Some demo of advanced PsychPortAudio use and PowerMate use.
                                                                                                培养你的内心DJ！
                                                                                                关于PsychPortAudio函数的高阶用法以及PowerMate用法的演示。
    ValetonVanNorrenDemo        - Exercise our code that implements the V-VN (1983) cone adaptation model.
                                                                                                关于运用我们实现了V-VN (1983)锥适应模型的代码的演示。
    VideoCaptureDemo            - Simple demo for video capture functions.                      关于视频捕捉功能的简单演示。
    VideoCaptureToMatlabDemo    - demo of returning live captured video to Octave or matlab as image matrices.
                                                                                                关于把现场捕捉的视频作为图像矩阵返回给MATLAB/Octave的演示。
    VideoDelayLoopMiniDemo      - Delayed visual feedback with controllable delay.              关于延迟可控的延迟视觉反馈的演示。
    VideoDVCamCaptureDemo       - Demonstrate video capture and recording from DV consumer cameras.
                                                                                                关于使用DV用户摄像机进行视频捕捉和记录的演示。
    VideoIPWebcamCaptureDemo    - demo video capture from an Android device via the Android IPWebcam app.
                                                                                                关于使用安卓设备并通过安卓IPWebcam应用进行视频捕捉的演示。
    VideoMultiCameraCaptureDemo - demo of time-synchronized high-perf capture and recording from multiple firewire cameras on Linux and OSX.
                                                                                                关于时间同步的、高性能的视频捕捉和记录（在Linux和OSX操作系统上，使用多台火线（法尔接口）摄像机）的演示。
    VideoOfflineCaptureDemo     - capture video into internal memory, then return it after stop of capture.
                                                                                                关于捕捉视频放入内部存储，并在捕捉过程结束后返回视频的演示。
    VideoRecordingDemo          - record captured video to movie files, possibly with audio.    关于将被捕捉的视频记录成影片文件（可能包含音频）的演示。
    VideoTextureExtractionDemo  - Use video capture + some computer based tracking to extract textures of objects in video.
                                                                                                关于使用视频捕捉功能和基于计算机的追踪功能来提取视频对象的纹理的演示。
    VignettingCorrectionDemo    - Demonstrate how to do display devignetting aka per-pixel gain correction.
                                                                                                关于显示反渐晕效果（亦称为：每像素增益校正）的演示。
    VRHMDDemo                   - Demonstrate how to use a Virtual reality head mounted display in the most basic way.
                                                                                                关于用最基本方式使用VRHMD（Virtual Reality Head Mounted Display, 虚拟现实头戴式显示器）的演示。
                                                                                                注：
                                                                                                - OpenAL (Open Audio Library, 开放音频库), 是一个跨平台的音效API (应用程序编程接口)。
                                                                                                - GLSL (OpenGL Shading Language, OpenGL着色语言), 是一个高级着色语言。
                                                                                                  它能让开发者更直接地控制图形管道，而无需使用相应的汇编语言或者硬件特定语言。
                                                                                                - Gabor (Dennis Gabor, 加博尔·德奈什)，英国籍匈牙利裔犹太人物理学家，发明了全息摄影。Gabor可能也被用来指代使用了全息摄影技术的图像。
                                                                                                - CLUT (Colour Look-Up Table, 颜色查找表), 是一种用于将一系列颜色转换成另一系列颜色的机制。
                                                                                                - Kinect, 微软开发的体感装置。
                                                                                                  Kinect让用户无需控制器（如：游戏机手柄），而是通过手势和语音指令，来控制设备（如：游戏机和电脑）。
                                                                                                  Kinect起初只能用在微软的Xbox游戏机上，现在已经能用在其他各个领域。
                                                                                                - Mandelbrot (Benoit Mandelbrot, 本华·曼德博), 法国和美国籍波兰裔犹太人数学家。
                                                                                                  他最大的成就是创立了分形几何，创造了“分形”这个名词，描述了曼德博集合。
                                                                                                - Mandelbrot Set (曼德博集合／曼德勃罗集合／曼德布洛特集合)，是一种在复平面上组成分形的点的集合，是一种分形图案。
                                                                                                - MOGL, 是一个包含了多个M文件包装器和一个MEX文件的集合，通过它可以在MATLAB中调用所有OpenGL命令。
                                                                                                - RTBox, 这里的RTBox指的是“USTC - RTBox”反应时间盒（Reaction Time Box），
                                                                                                  一种用来从实验对象处收集响应信息的、高计时精度的响应按钮盒（Response Button Box）。
                                                                                                - Raspberry Pi (树莓派), 是一系列小型的单板机电脑。
                                                                                                  它的目的是以低价硬件及自由软件促进发展中国家的学校的基本计算机科学的教授。
                                                                                                - GPIO (General-purpose Input/Output, 通用输入输出), 它指的是集成电路板或电脑主板上没有特定用途的、默认不被使用的板针。
                                                                                                  如有需要，用户在设备运行时可以控制使用这些板针。
                                                                                                - CIE ((法) Commission Internationale de l'éclairage / International Commission on Illumination, 国际照明委员会),
                                                                                                  是一个有关光学、照明、颜色和色度空间科学领域的国际权威组织。
                                                                                                - CIE xyY指的是一个颜色空间（Color Space），它被广泛用于在实践中指定颜色。
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

========================================
References
========================================
MATLAB - MathWorks
http://mathworks.com/products/matlab

MATLAB - Wikipedia
https://en.wikipedia.org/wiki/MATLAB

MATLAB Documentation - MathWorks
https://www.mathworks.com/help/matlab

MATLAB Academy - MathWorks
https://matlabacademy.mathworks.com/

Videos and Webinars - MathWorks
https://www.mathworks.com/videos.html

MATLAB Programming - Wikibooks
https://en.wikibooks.org/wiki/MATLAB_Programming

MATLAB - Tutorials Point
http://www.tutorialspoint.com/matlab/

MATLAB Installation Information (Sample)
--------------------------------------------------------------------------------
Installation Folder : C:\Program Files\MATLAB\R2016b
Download Size       : 3,592 MB
Installation Size   : 10,463 MB
Products            :
- MATLAB 9.1
- Simulink 8.8
- Bioinformatics Toolbox 4.7
- Communications System Toolbox 6.3
- Computer Vision System Toolbox 7.2
- Control System Toolbox 10.1
- Curve Fitting Toolbox 3.5.4
- Data Acquisition Toolbox 3.10
- Database Toolbox 7.0
- Datafeed Toolbox 5.4
- DSP System Toolbox 9.3
- Econometrics Toolbox 3.5
- Financial Instruments Toolbox 2.4
- Financial Toolbox 5.8
- Global Optimization Toolbox 3.4.1
- Image Acquisition Toolbox 5.1
- Image Processing Toolbox 9.5
- Instrument Control Toolbox 3.10
- Neural Network Toolbox 9.1
- Optimization Toolbox 7.5
- Parallel Computing Toolbox 6.9
- Signal Processing Toolbox 7.3
- SimBiology 5.5
- Simulink Control Design 4.4
- Spreadsheet Link 3.3
- Stateflow 8.8
- Statistics and Machine Learning Toolbox 11.0
- Symbolic Math Toolbox 7.1
- System Identification Toolbox 9.5
--------------------------------------------------------------------------------

Psychtoolbox
http://psychtoolbox.org/

Psychtoolbox - Wikipedia
https://en.wikipedia.org/wiki/Psychtoolbox_for_MATLAB

Psychtoolbox Documentation
http://docs.psychtoolbox.org/Psychtoolbox

Psychtoolbox Tutorial
http://peterscarfe.com/ptbtutorials.html
